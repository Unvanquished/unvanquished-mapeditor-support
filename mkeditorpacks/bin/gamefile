#!/usr/bin/env python3
#-*- coding: UTF-8 -*-

# Copyright (c) 2014-2017, Daemon Developers
# All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the Daemon developers nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL DAEMON DEVELOPERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import yaml
import re
import sys
import os.path
from xml.etree import ElementTree as ET
import xml.dom.minidom
from datetime import datetime
import argparse
from collections import OrderedDict


supported = {}
supported["gtkradiant"] = {}
supported["gtkradiant"]["vfs"] = ["pk3", "pk4", "dpk"]
supported["gtkradiant"]["vfsalias"] = {"pk4": "pk3", "dpk": "pk3"}
supported["gtkradiant"]["texture"] = ["tga", "jpg", "png", "pcx", "bmp"]
supported["gtkradiant"]["model"] = ["iqm", "md3", "ase", "lwo", "obj", "3ds", "picoterrain"]
supported["netradiant"] = {}
supported["netradiant"]["vfs"] = ["pk3", "pk4", "dpk"]
supported["netradiant"]["texture"] = ["tga", "jpg", "png", "pcx", "bmp", "webp", "ktx", "dds", "crn"]
supported["netradiant"]["model"] = ["iqm", "md5mesh", "md3", "ase", "lwo", "obj", "3ds", "picoterrain"]
supported["darkradiant"] = {}
supported["darkradiant"]["vfs"] = ["pk3", "pk4", "dpk"]
supported["darkradiant"]["texture"] = ["tga", "jpg", "png", "pcx", "bmp", "dds"]
supported["darkradiant"]["model"] = ["md5mesh", "md3", "ase", "lwo", "obj", "3ds", "picoterrain"]
supported["trenchbroom"] = {}
supported["trenchbroom"]["vfs"] = ["pk3", "pk4", "dpk"]
supported["trenchbroom"]["texture"] = []
supported["trenchbroom"]["model"] = ["md3"]


# load yaml data as ordered dict so generated file content keep the same order after each generation (reduces diff noise)
def yaml_dict_representer(dumper, data):
    return dumper.represent_dict(data.iteritems())


def yaml_dict_constructor(loader, node):
    return OrderedDict(loader.construct_pairs(node))


yaml_mapping_tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG
yaml.add_representer(OrderedDict, yaml_dict_representer)
yaml.add_constructor(yaml_mapping_tag, yaml_dict_constructor)


def fine_format_xml(root):
    return xml.dom.minidom.parseString(ET.tostring(root, encoding='unicode')).toprettyxml()


def print_file(yamlfile, editor):
    attrib = OrderedDict()

    if editor in [ "netradiant" ]:
        attrib["entityclasstype"] = "def"

    if editor in [ "darkradiant", "netradiant", "trenchbroom" ]:
        attrib["index"] = "1"

        game = yaml.load(yamlfile.read(), Loader=yaml.FullLoader)
        if "game" in game.keys():
            l0  = game["game"]

            if "name" in l0.keys():
                attrib["name"] = l0["name"]
                attrib["basegamename"] = l0["name"]
                attrib["unknowngamename"] = " ".join(["Custom", l0["name"], "modification"])

            if "base" in l0.keys():
                attrib["basegame"] = l0["base"]

            if "textures" in l0.keys():
                textures_dir = l0["textures"]

            if "keyword" in l0.keys():
                l1 = l0["keyword"]

                if "editor" in l1.keys():
                    attrib["type"] = l1["editor"]

                if "compiler" in l1.keys():
                    attrib["q3map2_type"] = l1["compiler"]

        if "engine" in game.keys():
            l0 = game["engine"]

            for sys in ["linux", "macos", "windows"]:
                if sys == "windows":
                    sysname = "win32"

                else:
                    sysname = sys

                if sys in l0.keys():
                    l1 = l0[sys]

                    if "dir" in l1.keys():
                        if editor in ["netradiant"]:
                            attrib["enginepath_" + sysname] = l1["dir"]
                        else:
                            attrib["enginepath_" + sysname] = l1["legacy_dir"]

                    if "name" in l1.keys():
                        attrib["engine_" + sysname] = l1["name"]

    if editor in [ "darkradiant", "netradiant" ]:
        entfile = open(os.path.join(os.path.dirname(os.path.dirname(yamlfile.name)), "entities", "class.yaml"))
        ent = yaml.load(entfile.read(), Loader=yaml.FullLoader)

        if "home" in game.keys():
            l0 = game["home"]
            if "legacy" in l0.keys():
                attrib["prefix"] = l0["legacy_dir"]

        if "entity" in ent.keys():
            l0 = ent["entity"]
            if "type" in l0:
                attrib["entities"] = l0["type"]
            if "class" in l0:
                attrib["entityclass"] = l0["type"]

# FIXME: if not .def
    if editor in [ "netradiant" ]:
        attrib["entityclasstype"] = "xml"

    map_dict = {}
    prefab_dict = {}
    shader_dict = {}
    archive_list = []
    texture_list = []
    model_list = []

    if editor in [ "darkradiant", "gtkradiant", "netradiant", "trenchbroom" ]:
        vfsfile = open(os.path.join(os.path.dirname(yamlfile.name),"vfs.yaml"), "r")
        vfs = yaml.load(vfsfile.read(), Loader=yaml.FullLoader)

        if "vfs" in vfs.keys():
            for i in vfs["vfs"]:
                if i in supported[editor]["vfs"]:
                    archive_list.append(i)

        if "texture" in vfs.keys():
            for i in vfs["texture"]:
                if i in supported[editor]["texture"]:
                    texture_list.append(i)

        if "model" in vfs.keys():
            for i in vfs["model"]:
                if i in supported[editor]["model"]:
                    model_list.append(i)

        # it is required by DarkRadiant or it will crash at startup
        if "map" in vfs.keys():
            l0 = vfs["map"]

            if "type" in l0.keys():
                map_dict["type"] = l0["type"]

            if "path" in l0.keys():
                map_dict["path"] = l0["path"]

            if "ext" in l0.keys():
                map_dict["ext"] = l0["ext"]

            if "brush" in l0.keys():
                map_dict["brush"] = l0["brush"]

            if "patch" in l0.keys():
                map_dict["patch"] = l0["patch"]

        # it is required by DarkRadiant or it will crash at startup
        if "prefab" in vfs.keys():
            l0 = vfs["prefab"]

            if "path" in l0.keys():
                prefab_dict["path"] = l0["path"]

        if "shader" in vfs.keys():
            l0 = vfs["shader"]
            if "type" in l0.keys():
                shader_dict["type"] = l0["type"]

            if "path" in l0.keys():
                shader_dict["path"] = l0["path"]

            if "ext" in l0.keys():
                shader_dict["ext"] = l0["ext"]

    if editor in [ "netradiant", "darkradiant" ]:
        if archive_list != []:
            attrib["archivetypes"] = " ".join(archive_list)

        if model_list != []:
            attrib["modeltypes"] = " ".join(model_list)

        if map_dict["type"] != []:
            attrib["maptypes"] = " ".join(map_dict["type"])

        if map_dict["brush"] != []:
            attrib["brushtypes"] = " ".join(map_dict["brush"])

        if map_dict["patch"] != []:
            attrib["patchtypes"] = " ".join(map_dict["patch"])

        if "type" in shader_dict.keys():
            # only one shader type for the moment
            attrib["shaders"] = shader_dict["type"][0]

        if "path" in shader_dict.keys():
            # only one shader path for the moment
            attrib["shaderpath"] = shader_dict["path"][0]

    if editor in [ "netradiant" ]:
        if texture_list != []:
            attrib["texturetypes"] = " ".join(texture_list)

    if editor in [ "darkradiant" ]:
        # workaround: DarkRadiant uses the type field to select the export map format
        # otherwise it would say: Failed to locate map format module
        if map_dict["type"][0] == "mapq3":
            attrib["type"] = "quake3"
        elif map_dict["type"][0] == "mapdoom3":
            attrib["type"] = "doom3"
        elif map_dict["type"][0] == "mapquake4":
            attrib["type"] = "quake4"

    if editor in [ "netradiant", "darkradiant" ]:
        gamefile = ET.Element('game', attrib=attrib)

    if editor in [ "gtkradiant" ]:
        synapsefile = ET.Element('synapseconfig')

        client_core_elem = ET.SubElement(synapsefile, "client", attrib={"name": "core"})
        client_image_elem = ET.SubElement(synapsefile, "client", attrib={"name": "image"})
        client_shaders_elem = ET.SubElement(synapsefile, "client", attrib={"name": "shaders"})
        client_map_elem = ET.SubElement(synapsefile, "client", attrib={"name": "map"})
        client_xmap_elem = ET.SubElement(synapsefile, "client", attrib={"name": "xmap"})
        client_model_elem = ET.SubElement(synapsefile, "client", attrib={"name": "model"})

        client_eclass_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "eclass"})
        client_eclass_elem.text = "def"

        if texture_list != []:
            image_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "image"})
            image_elem.text = " ".join(texture_list)

        if map_dict["type"] != []:
            # only one map type supported, take the first one
            core_map_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "map"})
            core_map_elem.text = map_dict["type"][0]

        if map_dict["brush"] != []:
            # only one surface type supported, take the first one
            core_surfdialog_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "surfdialog"})
            core_surfdialog_elem.text = map_dict["brush"][0]

        if "type" in shader_dict.keys():
            core_shader_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "shaders"})
            # only one shader type for the moment
            core_shader_elem.text = shader_dict["type"][0]
            shaders_shader_elem = ET.SubElement(client_shaders_elem, "api", attrib={"name": "shaders"})
            shaders_shader_elem.text = shader_dict["type"][0]
            map_shader_elem = ET.SubElement(client_map_elem, "api", attrib={"name": "shaders"})
            map_shader_elem.text = shader_dict["type"][0]
            xmap_shader_elem = ET.SubElement(client_xmap_elem, "api", attrib={"name": "shaders"})
            xmap_shader_elem.text = shader_dict["type"][0]
            model_shader_elem = ET.SubElement(client_model_elem, "api", attrib={"name": "shaders"})
            model_shader_elem.text = shader_dict["type"][0]

        if archive_list != []:
            # it looks like there is no support for more than one
            # format in gtkradiant, so pick the first one, by the
            # way gtkradiant pk3 vfs also handles pk4 and dpk
            archive = archive_list[0]
            if archive in supported["gtkradiant"]["vfsalias"].keys():
                archive = supported["gtkradiant"]["vfsalias"][archive_list[0]]

            core_archive_elem = ET.SubElement(client_core_elem, "api", attrib={"name": "VFS"})
            core_archive_elem.text = archive
            image_archive_elem = ET.SubElement(client_image_elem, "api", attrib={"name": "VFS"})
            image_archive_elem.text = archive
            shaders_archive_elem = ET.SubElement(client_shaders_elem, "api", attrib={"name": "VFS"})
            shaders_archive_elem.text = archive
            map_archive_elem = ET.SubElement(client_map_elem, "api", attrib={"name": "VFS"})
            map_archive_elem.text = archive
            xmap_archive_elem = ET.SubElement(client_xmap_elem, "api", attrib={"name": "VFS"})
            xmap_archive_elem.text = archive
            model_archive_elem = ET.SubElement(client_model_elem, "api", attrib={"name": "VFS"})
            model_archive_elem.text = archive

    if editor in ["darkradiant"]:
        maptype_elem = ET.SubElement(gamefile, "mapFormat")

        # if unset, it defaults to empty string, meaning DarkRadiant will
        # write a maps/<basename> file without extension that will collide
        # with the maps/<basename> folder name to store external lightmaps
        ET.SubElement(maptype_elem, "infoFileExtension", attrib={"value": ".darkradiant"})

        if map_dict["type"][0] == "mapq3":
            ET.SubElement(maptype_elem, "version", attrib={"value": "2"})
            # it is required by DarkRadiant or it will crash while saving
            # DarkRadiant provided samples uses 16, but NetRadiant uses 10
            # using 10 will reduce diff noise between the two editors.
            ET.SubElement(maptype_elem, "floatPrecision", attrib={"value": "10"})

        for map_ext in map_dict["ext"]:
            ET.SubElement(maptype_elem, "fileExtension", attrib={"value": map_ext})

        for map_path in map_dict["path"]:
            ET.SubElement(maptype_elem, "mapFolder", attrib={"value": map_path})

        for prefab_path in prefab_dict["path"]:
            ET.SubElement(maptype_elem, "prefabFolder", attrib={"value": prefab_path})

        if texture_list != []:
            filetype_elem = ET.SubElement(gamefile, "filetypes")
            texture_filetype_elem = ET.SubElement(filetype_elem, "texture")

            for texture_ext in texture_list:
                extension_elem = ET.SubElement(texture_filetype_elem, "extension")
                extension_elem.text = texture_ext

        # parent for fonts too
        filesystem_elem = ET.SubElement(gamefile, "filesystem")
        if "type" in shader_dict.keys() and "path" in shader_dict.keys():
            # TODO: fonts

            # materials
            shaders_filesystem_elem = ET.SubElement(filesystem_elem, "shaders")

            # no shader type?

            # only one shader extension?
            extension_elem = ET.SubElement(shaders_filesystem_elem, "extension")
            extension_elem.text = shader_dict["ext"][0]

            # only one shader path?
            basepath_elem = ET.SubElement(shaders_filesystem_elem, "basepath")
            shader_path = shader_dict["path"][0]

            basepath_elem.text = shader_path

        # it is required by DarkRadiant or the map will not be rendered properly
        defaultfile = open(os.path.join(os.path.dirname(yamlfile.name),"default.yaml"), "r")
        default_dict = yaml.load(defaultfile.read(), Loader=yaml.FullLoader)

        defaults_elem = ET.SubElement(gamefile, "defaults")
        for default_name in default_dict:
            ET.SubElement(defaults_elem, default_name, attrib={"value": default_dict[default_name]})

        filterfile = open(os.path.join(os.path.dirname(yamlfile.name),"filter.yaml"), "r")
        filter_dict = yaml.load(filterfile.read(), Loader=yaml.FullLoader)

        filtersystem_elem = ET.SubElement(gamefile, "filtersystem")

        for filter_name in filter_dict.keys():
            for criterion in filter_dict[filter_name]:
                filter_elem = ET.SubElement(filtersystem_elem, "filter", attrib={"name": filter_name})

            criterion_elem = ET.SubElement(filter_elem, "filterCriterion", attrib=criterion)

    if editor in [ "trenchbroom" ]:
        import json
        json_dict = OrderedDict()
        json_dict["version"] = 2
        json_dict["name"] = attrib["name"]

        # TODO: check if exists
        json_dict["icon"] = "Icon.png"

        if "mapq3" in map_dict["type"]:
            json_dict["experimental"] = True
            json_dict["fileformats"] = []

            format_dict=OrderedDict()
            format_dict["format"] = "Quake3"
            legacy_format_dict=OrderedDict()
            legacy_format_dict["format"] = "Quake3 (legacy)"

            json_dict["fileformats"].append(format_dict)
            json_dict["fileformats"].append(legacy_format_dict)

        json_dict["filesystem"] = OrderedDict()

        json_dict["filesystem"]["search_path"] =  attrib["basegame"]

        for archive_format in archive_list:
        # FIXME: It picks the last one at this time
            pass

        # FIXME: It expects an archive_format to be found and supported
        if archive_format in ["pk3", "pk4", "dpk"]:
            json_dict["filesystem"]["packageformat"] =  OrderedDict()
            json_dict["filesystem"]["packageformat"]["extension"] = archive_format
            json_dict["filesystem"]["packageformat"]["format"] = "zip"

        json_dict["textures"] = OrderedDict()
        json_dict["textures"]["package"] = OrderedDict()
        json_dict["textures"]["package"]["type"] = "directory"
        json_dict["textures"]["package"]["root"] = textures_dir

        # only one shader type for the moment
        if shader_dict["type"][0] == "quake3":
            json_dict["textures"]["format"] = OrderedDict()
            json_dict["textures"]["format"]["extensions"] = [ "" ]
            json_dict["textures"]["format"]["format"] = [ "q3shader" ]
            json_dict["textures"]["attribute"] = "_tb_textures"

        json_dict["entities"] = OrderedDict()
        entities_file_name = attrib["basegamename"] + os.path.extsep + "def"
        json_dict["entities"]["definitions"] = entities_file_name

        # TODO: does it make sense to customize it?
        json_dict["entities"]["defaultcolor"] = "0.6 0.6 0.6 1.0"
        json_dict["entities"]["modelformats"] = model_list

        print(json.dumps(json_dict, indent=4))
    

    if editor in [ "netradiant", "darkradiant" ]:
        print(fine_format_xml(gamefile))

    if editor in [ "gtkradiant" ]:
        print(fine_format_xml(synapsefile))


supported_editor_list = ["darkradiant", "netradiant", "gtkradiant", "trenchbroom"]

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    description="Generates radiant q3map2 build menu file.")

parser.add_argument("filename", metavar="game.yaml", type=argparse.FileType("r"), help="YAML file path")
parser.add_argument("editor", choices=supported_editor_list, help="Editor name")

args = parser.parse_args()

print_file(args.filename, args.editor)
