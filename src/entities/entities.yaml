# TODO: rename targetname -> name
# TODO: finish worldspawn
# TODO: check target_print for 2 players
- name: worldspawn
  extend: [indexmap2]
  d3Class: idWorldspawn
  color: '000000'
  props:
    deluxeMapping: bool # not gtk q3map2
    mapOverBrightBits: '' # not gtk q3map2
    _q3map2_cmdline: '' # not gtk q3map2
    hdrRGBE: bool # not gtk q3map2
    mapOverBrightBits: ''
    enabledust: '' # from shader manual, not in q3map2
    # found in code
    reverbEffect: &revEffect Effect name. Use /testReverb <TAB> to view the list of possible values.
    reverbIntensity: &revIntensity Intensity of reverberation.
    # testReverb command works on these values
    # bug: causes game to crash CM_ClipHandleToModel: bad handle -1
    # idk how does it work on yocto.. did absolutely same values and got error
    BPInitialBudget: >
      Initial build point budget for all teams. 
      OVERRIDDEN BY BPInitialBudget{Aliens|Humans}.
    BPInitialBudgetHumans: >
      Initial build point budget for the Human team. 
      This takes precedence over BPInitialBudget for this team.
    BPInitialBudgetAliens: >
      Initial build point budget for the Alien team. 
      This takes precedence over BPInitialBudget for this team.
    BPBudgetPerMiner: Extra build points provided by Leeches and Drills.
    fogColor: RGB # bug: no effect
    fogDensity: '' # bug: no effect
    remapshader*: > # bug: R_RemapShader doesn't work
      Remap shaders. Any property name starting with "remapshader" counts.
      Values are ; separated.
    # vertexremapshader skipped by game and commented in q3map2
    # OK:
    message: Shown above loading bar.
    music: &Sound_path Path/name of .wav or .ogg file.
      # bug: music doesn't loop, plays only once
    gravity: Gravity of level.
    disabledEquipment: &Humanequip_list A comma delimited list of human weapons or upgrades.
      (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon,
      larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
    disabledClasses: &Alienclass_list A comma delimited list of alien classes.
      (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
      # bug: disable classes works, but shows warnings
    disabledBuildables: &Buildable_list A comma delimited list of buildables.
      (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret,
      tesla,arm,medistat,drill,reactor,repeater)
      # bug: disable buildables works, but shows warnings
    colorGrade: or gradingTexture - Path of color grading effect
    _keepLights: >
      [q3map] Keep light entities in the BSP. Normally stripped out by the BSP
      process and read from the .map file by the lighting phase.
    _style*rgbgen: >
      [q3map] Used for lights with "style" set. Star is replaced by numbers.
    _style*alphagen: >
      [q3map] Used for lights with "style" set. Star is replaced by numbers.
    _ambient: >
      [q3map] Adds a constant value to overall lighting. Use is not recommended.
      Ambient light will have a tendency to flatten out variations in light and shade.
    _color: >
      [q3map] color value for "_ambient", "_minvertexlight", "_mingridlight".
    _minvertexlight: >
      [q3map] "_ambient" for vertex lighting.
    _mingridlight: >
      [q3map] "_ambient" for lightgrid (entity and weapon lighting).
    _minlight: >
      [q3map] Shorthand for setting both "_minvertexlight" and "_mingridlight".
    _blocksize: >
      [q3map] q3map always splits the BSP tree along the planes.
      Increase the blocksize using larger powers of 2 to reduce compile times
      on very large maps with a low structural brush density.
    _farplanedist: >
      [q3map] Limit on how many units the vis phase of compilation can see. Used
      in combination with level-wide fog, it can help reduce r_speeds on large, open maps.
      Use with "_foghull".
    gridsize: >
      [q3map] Granularity of the lightgrid created by q3map. Values for every axis. Minimum value is 8.
    _noshadersun: >
      [q3map] Ignore q3map_sun*|sun directives in sky shaders and ONLY use entity sun lights.
    _foghull: >
      [q3map] Shader to use for "fog hull." Foghull shader should be a sky shader.
      Omit the "textures/" prefix. Use with "_farplanedist".
  proptypes:
    music: string (sound)
    disabledEquipment: string
    disabledClasses: string
    disabledBuildables: string
    colorGrade: string (texture)
    gravity: float
    reverbIntensity: float
    _keepLights: int
    _ambient: float
    _minvertexlight: float
    _mingridlight: float
    _minlight: float
    _color: vec3_float (color)
    fogDensity: float
    fogColor: vec3_float (color)
    _blocksize: vec3_int
    gridsize: vec3_float
    _noshadersun: int
    remapshader*: string
  propdefaults:
    gravity: 800
    _keepLights: false
    _blocksize: [1024, 1024, 1024]
    _color: [1, 1, 1]
    _noshadersun: false
  propranges:
    reverbIntensity: [0.0, 2.0]
  propeg:
    colorGrade: gfx/cgrading/red-only
    music: music/sonic5.wav
    _ambient: 30
    _minvertexlight: 30
    _mingridlight: 30
    _minlight: 30
    gridsize: [64, 64, 128]
    remapshader*: textures/newmap/ter_rock;textures/newmap/ter_sand
  boolvalues:
    _keepLights: [0, 1]
    _noshadersun: [0, 1]
  propreplace:
    disabledBuildables: {'of buildables': 'of buildables to disable for this map'}
    disabledEquipment: {'weapons or upgrades': 'weapons or upgrades to disable for this map'}
    disabledClasses: {'alien classes': 'alien classes to disable for this map'}
    music:
      'name of': 'name of looping'
      file: file used for level's music
  desc: Only used for the world.
- name: light
# bug: marked as deprecated in code. src/gamelogic/game/g_spawn.c:368
  extend: [point]
  d3Class: idLight
  color: a6a6ff
  flags: &light_flags
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
  - ANGLE: Force angle attenuation. Useless, "_anglescale" implies this flag on.
  - DARKLIGHT: Unused.
  - DARKLIGHT: Unused.
  # bug: makes the light disappear completely
  - NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting).
  props:
    #light_center: [dynamic]: no effect
    light: Intensity.
    _color: Weighted RGB value of light color.
    _filterradius: >
      [q3map] No attenuation within _filterradius sphere.
    target: >
      [q3map] Lights pointed at a target will be spotlights.
    radius: >
      [q3map] Overrides the default 64 unit Radius of a spotlight at the target point.
    scale: >
      [q3map] Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60
    fade: >
      [q3map] Linear (only linear) light attenuation coefficient, less value - far the light goes.
    _anglescale: >
      [q3map] Angle attenuation coefficient for spotlights (those having target).
    _samples: >
      [q3map] Used for light jitter in pair with _deviance.
      Number of lights created near each other instead of the sole light source.
      Sum of all intensities equals to original light intensity.
    _deviance: >
      [q3map] Used in pair with _samples. Jitter radius for array of lights.
    _sun: >
      [q3map] Set this key on a spotlight (those having "target") to make an infinite sun light.
      This can be used instead of q3map_skylight shader directive.
      Properties remaining useful are "target", "_color", "_deviance", "_samples", "style".
    # bug: doesn't work with buttons.
    targetname: Setting name implies dynamic light style set.
    style: >
      [q3map] Used for blinking lights. Number used to choose proper worldspawn entity keys with formulas.
      Key names are _style*rgbgen and _style*alphagen where * is replaced by style number.
      Read more here http://q3map2.robotrenegade.com/docs/shader_manual/lightstyles.html
    noradiosity: >
      [dynamic] Disable radiosity (lightmap) lighting. Setting this property makes the light dynamic.
      This enables realtime shadows.
    light_radius: >
      [dynamic] Same as "light", but allows to use different radius per axis.
      Dynamic lights treat "light" as radius.
    noshadows: >
      [dynamic] Disable casting shadows.
    texture: >
      [dynamic] Lighting texture.
    light_target: >
      [dynamic,projected] Direction vector. Length of vector defines frustum pyramid height.
    light_right: >
      [dynamic,projected] Right vector. Length of vector defines the size of far frustum pyramid edge.
    light_up: >
      [dynamic,projected] Up vector. Length of vector defines the size of far frustum pyramid edge.
    light_start: >
      [dynamic,projected] Point where light must start.
    light_end: >
      [dynamic,projected] Point where light must end. By default it is "light_target".
    light_scale: >
      [dynamic] Intensity multiplicator. Can't be bigger than r_lightScale cvar.
    rotation: >
      [dynamic] 3x3 rotation matrix for frustum box.
    parallel: >
      [dynamic,parallel] Make light parallel, similar to using orthogonal projection instead of usual frustum.
    # lights can also do _flare and _flareshader (LensFlare etc). but it seems to be not supported by unv.
  proptypes:
    light: float
    _color: vec3_float (color)
    fade: float
    style: int
    scale: float
    _filterradius: float
    _deviance: float
    _samples: int
    radius: float
    _sun: int
    noshadows: int
    noradiosity: int
    parallel: int
    light_radius: vec3_float
    light_target: vec3_float
    light_right: vec3_float
    light_up: vec3_float
    light_start: vec3_float
    light_end: vec3_float
    light_scale: float
    rotation: vec9_float
  propdefaults:
    light: 300
    _color: [1, 1, 1]
    fade: 1
    style: 0
    scale: 1
    _filterradius: 0
    _deviance: 0
    _samples: 1
    radius: 64
    light_start: [0, 0, 0]
    parallel: false
    noradiosity: false
    noshadows: false
    _sun: false
  boolvalues:
    _sun: [0, 1]
    noshadows: [0, 1]
    noradiosity: [0, 1]
    parallel: [0, 1]
  desc: >
    Non-displayed point light source.

    The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights.
    The -skyscale argument affects brightness of entity sun lights.

    Properties for dynamic realtime lights marked as [dynamic].
    Any property marked as [projected] if set makes dynamic light projected.
    Projected light requires most of its properties set, such as "light_target", "light_up", "light_right".
- name: lightJunior
  extend: [point]
  d3Class: idLight
  color: 00b34c
  size_min: [-6.0, -6.0, -6.0]
  size_max: [6.0, 6.0, 6.0]
  flags:
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
  - ANGLE: Force angle attenuation. Useless, "_anglescale" implies this flag on.
  props:
    light: Intensity.
    _color: Weighted RGB value of light color.
    _filterradius: >
      [q3map] No attenuation within _filterradius sphere.
    target: >
      [q3map] Lights pointed at a target will be spotlights.
    radius: Overrides the default 64 unit Radius of a spotlight at the target point.
    scale: >
      [q3map] Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60
    fade: >
      [q3map] Linear (only linear) light attenuation coefficient, less value - far the light goes.
    _anglescale: >
      [q3map] Angle attenuation coefficient for spotlights (those having target).
    _samples: >
      [q3map] Used for light jitter in pair with _deviance.
      Number of lights created near each other instead of the sole light source.
      Sum of all intensities equals to original light intensity.
    _deviance: >
      [q3map] Used in pair with _samples. Jitter radius for array of lights.
  proptypes:
    light: float
    _color: vec3_float (color)
    fade: float
    scale: float
    _filterradius: float
    _deviance: float
    _samples: int
    radius: float
  propdefaults:
    light: 300
    _color: [1, 1, 1]
    fade: 1
    scale: 1
    _filterradius: 0
    _deviance: 0
    _samples: 1
    radius: 64
  desc: >
    Non-displayed point light source. Unlike usual light affects only entities (lightgrid).

    The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights.
    The -skyscale argument affects brightness of entity sun lights.
- name: func_bobbing
# bug: after activation via targetname stops and never resumes
  extend: [chain_autonom,brush,indexmap2,mover]
  flags:
  - X_AXIS: Entity will bob along the X axis.
  - Y_AXIS: Entity will bob along the Y axis.
  props:
    speed: Amount of time in seconds for one complete oscillation cycle.
    height: Amount of travel of the oscillation movement.
    dmg: Damage dealt when blocked.
    # bug: parsed, but actually unused (maybe remove it?).
    # there is the line of code overrides this parameter
    # src/gamelogic/game/g_spawn_mover.c:370
    # player squashed instantly
    phase: Sets the start offset of the oscillation cycle.
    noise: &another_func_noise Sound played when activated via targetname. Emitted at origin.
    # bug: should it emit noise always, not just when activated? When activated, it's better to call
    # property "sound".
    targetname: &toggleable Give it a name to be able to toggle its activity.
  proptypes:
    height: float
    phase: float
  propdefaults:
    height: 32
    phase: 0
    dmg: 2
    speed: 4
  propranges:
    phase: [0, 1]
  desc: >
    Solid entity that oscillates back and forth in a linear motion.
    Entity bobs on the Z axis (up-down) by default.
- name: func_button
  extend: [chain_active,brush,indexmap2,mover]
  flags:
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - ACTIVATE: The button may be operated with the "use" key (+activate).
  props:
    wait: &brush_wait Number of seconds before brush returns. -1 = return immediately.
    speed: &brush_speed Determines how fast the brush moves.
    lip: &brush_lip When 0, brush displacement = brush's size in direction of movement.
      Positive lip value discreases displacement, leaving lip remaining at the end of move.
    angle: &brush_angle 'Determines moving direction of brush (around Z axis:
      0=+x, 90=+y, 180=-x, 270=-y; special values: up = -1, down = -2).'
    health: &brush_health If set, the brush must take damage (any amount) to activate.
    sound1to2: Activation sound.
  propreplace:
    speed: &Rbutt {brush: button}
    lip: *Rbutt
    angle: *Rbutt
    health: *Rbutt
    wait: {'before brush returns': 'button stays pressed'}
  proptypes:
    lip: float
  propdefaults:
    lip: 4
    health: false
    sound1to2: sound/movers/switches/button1.wav
  boolvalues:
    health: [0, 1]
  propranges:
    angle: [-2, 360]
  propeg:
    sound1to2: 'sound/dum.ogg'
  desc: >
    When a button is touched by a player, it moves in the direction set by the
    "angle" key, triggers all its targets, stays pressed by an amount of time set
    by the "wait" key, then returns to it's original position where it can be operated
    again.
- name: func_destructable
# bug or not: object just disappers without any explosion effect or sound. players not pushed by "explosion".
  extend: [chain_autonom,brush,indexmap2]
  flags:
  - SPAWN_DISABLED: Hidden by default. Can be shown via activation as target.
  props:
    health: Amount of damage needed to destroy this.
    damage: Splash damage caused when destroyed.
    radius: Splash damage radius.
    onDie: Name of the target fired when destroyed.
    targetname: Can be toggled as target. Causes object to appear or disappear. Even after being destructed object can appear again.
  proptypes:
    damage: int
    radius: int
  propdefaults:
    damage: 0
    radius: 0
    health: 100
  desc: >
    Destructable object. You can destroy this object in game. When destructed deals splash damage
    to everyone near it. Does not cause splash damage to buildables.
- name: func_door
# bug: no "noise" key
  extend: [chain_autonom,brush,indexmap2,mover]
  flags:
  - START_OPEN: The door will spawn in the open state and operate in reverse.
  # bug: activation area placed near opened state door position, often unreachable
  - '-': ''
  - CRUSHER: &door_crusher Door will not reverse direction when blocked and will keep damaging player
      or building until it dies or gets out of the way.
    # bug: crusher door trembling when blocked
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - ACTIVATE: &door_activate The door may be operated with the "use" key (+activate).
  - TOGGLE: &door_toggle 'This door will not close until triggered a second time. 
      &#10;Requires one or both of the following: 
      &#10;1. "targetname" to be set and to have a valid trigger.
      &#10;2. To have the ACTIVATE flag set.'
  props:
    sound1to2: The sound played on start moving from state 1 to state 2.
    sound2to1: The sound played on start moving from state 2 to state 1.
    soundPos1: The sound played reached state 1.
    soundPos2: The sound played reached state 2.
    targetname: &door_targetname If set, a func_button or trigger is required to activate the door.
      Overrides activation by damage.
    # bug: spectator cannot go through door with targetname set
    speed: *brush_speed
    lip: *brush_lip
    angle: *brush_angle
    wait: *brush_wait
      # bug: bad -1 value, it makes annoying sound cascade (opens/closes every frame)
      # bug: confusing 0 (stands for default value)
    range: Door triggering range.
    dmg: Damage to inflict on player when he blocks operation of door.
      Door will reverse direction when blocked unless CRUSHER spawnflag is set.
      # bug: cannot set 0 dmg
    health: *brush_health
  propreplace:
    speed: &Rdoor {brush: door}
    lip: *Rdoor
    angle: *Rdoor
    health: *Rdoor
  proptypes:
    range: int
    lip: float
  propdefaults:
    health: false
    range: 72
    lip: 8
    speed: 400
    dmg: 2
  boolvalues:
    health: [0, 1]
  desc: >
    Normal sliding door entity. By default, the door will activate when player
    walks close ("range") to it or when damage is inflicted ("health") to it.
- name: func_door_model
# bug: you can walk through closed door, it works only with targetname activation
# bug: with targetname activation you can stuck inside door when it "closes"
# bug: impossible to activate via "health" (shooting at door)
  extend: [chain_autonom,clight]
  flags:
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - '-': ''
  - ACTIVATE: *door_activate
  - TOGGLE: *door_toggle
  color: 007fcc
  props:
    animation: The first frame and number of frames in the door open animation.
      This will be reversed for the close animation.
    modelOrigin: >
      [required] "model2" position.
    model2: >
      [required] The door model.
    speed: The time taken for the door to change state in msec.
    range: Door triggering range.
    wait: Number of seconds before door returns.
    scale: Model scale factors for each axis.
    angle: &angle Short version of "angles".
    angles: Model orientation.
    sound1to2: The sound played on start moving from state 1 to state 2.
    sound2to1: The sound played on start moving from state 2 to state 1.
    soundPos1: The sound played reached state 1.
    soundPos2: The sound played reached state 2.
    noise: The sound played repeatedly while door is moving.
      # bug: plays only on forward door move. no way to set backward
    health: *brush_health # TODO: recheck when door will be fixed
    targetname: *door_targetname
  propreplace:
    health: {brush: door}
  proptypes:
    range: int
    modelOrigin: vec3_float
    scale: vec3_float
    animation: vec2_int
    wait: float # variance not used
  propdefaults:
    range: 72
    wait: 2
    modelOrigin: [0, 0, 0]
    scale: [1, 1, 1]
    speed: 200
  propeg:
    animation: [0, 10]
    model2: models/mapobjects/pipe/pipe02.md3
  desc: >
    A model based door entity. By default, the door will activate when player
    walks close to it. The opening and closing of the door is provided by an animation
    in the model itself.

    Every func_door_model needs its model to be positioned, scaled and orientated
    using the modelOrigin, scale and angle/angles keys repsectively.
- name: func_door_rotating
# maybe bug: no blocking damage.
  extend: [chain_autonom,brush,indexmap2,mover]
  flags:
  - START_OPEN: the door will spawn in the open state and operate in reverse.
  # bug: closes at the start of map and cannot be opened then
  - '-': ''
  - CRUSHER: *door_crusher
  # bug: crusher door trembling when blocked
  - REVERSE: the door will open the other way.
  - '-': ''
  - X_AXIS: rotate around the X axis instead of the Z. # TODO: check axis again
  - Y_AXIS: rotate around the Y axis instead of the Z. # TODO: check axis again
  - ACTIVATE: *door_activate
  - TOGGLE: *door_toggle
  props:
    wait: *brush_wait
      # bug: bad -1 value, it makes annoying sound cascade (opens/closes every frame)
    speed: Determines how fast the door moves, in degrees/second.
    rotatorAngle: The number of degrees through which to rotate.
    health: *brush_health
    targetname: If set, a func_button or trigger is required to activate the door.
      # bug: if health and targetname are set, still can be activated by buildable entity explosion near it
    origin: "[required] Rotation axis position."
    sound1to2: The sound played on start moving from state 1 to state 2.
    sound2to1: The sound played on start moving from state 2 to state 1.
    soundPos1: The sound played reached state 1.
    soundPos2: The sound played reached state 2.
    noise: The sound played repeatedly while door is moving.
  proptypes:
    wait: float # variance not used
    rotatorAngle: float
  propdefaults:
    wait: 2
    rotatorAngle: 90
    health: false
  propreplace:
    wait: *Rdoor
    health: *Rdoor
  boolvalues:
    health: [0, 1]
  desc: >
    Rotating door entity. By default, the door will activate when player walks
    close to it.

    Rotating door will not cause damage to player when blocked.

    When activated turns around the rotation axis ("origin") to angle ("rotatorAngle")
    with "speed", then stops. After "wait" time door starts turning back.
- name: func_dynamic
# bug: useless entity
# bug: direct triggering via button crashes game
  extend: [chain_autonom,brush,indexmap2,mover]
  color: 007fcc
  desc: >
    Do not use.
- name: func_group
  extend: [brush,indexmap]
  desc: >
    This is not an entity as such. It is strictly an editor utility to group
    world brushes and patches together for convenience (selecting, moving, copying,
    etc). You cannot group entities with this.

    The TAB key can be used to flip through the component pieces of a selected func_group
    entity, isolating individual components.
- name: func_pendulum
# bug: instakill in very big touching angle. It should just rub, not squish.
  extend: [chain_autonom,brush,indexmap2,mover]
  props:
    speed: Angle of swing arc in either direction from initial position.
    phase: Sets the start offset of the swinging cycle.
    angle: *angle
    dmg: Damage dealt when blocked.
    # bug: parsed, but actually unused (maybe remove it?).
    # there is the line of code overrides this parameter
    # src/gamelogic/game/g_spawn_mover.c:370
    # player squashed instantly
    angles: Orienting pendulum.
    targetname: Doesn't work properly.
    # bug: resets position of entity to 0 0 0
    origin: "[required] Rotation axis position."
    noise: *another_func_noise
  proptypes:
    phase: float
  propdefaults:
    phase: 0
    dmg: 2
    speed: 30
    origin: [0, 0, 0]
    angle: 0
    angles: [0, 0, 0]
  propranges:
    phase: [0, 1]
    angle: [-180.0, 180.0]
  desc: >
    Solid entity that describes a pendulum back and forth rotation movement. Rotates
    on the X axis by default. Pendulum frequency is a physical constant based on the
    length of the beam and gravity. Blocking the pendulum instantly kills a player.

    The speed of swing (frequency) is not adjustable.
- name: func_plat
# bug: when added to map raises warnings
# Warning: failed to load sound sound/movers/plats/pt1_end.wav
# Warning: failed to load sound sound/movers/plats/pt1_strt.wav
  extend: [chain_autonom,brush,indexmap2,mover]
  flags:
  - DONT_WAIT: The platform will not wait for a client to leave before returning to
      its original position.
  - '-': ''
  - CRUSHER: *door_crusher
  # bug: crusher door trembling when blocked
  props:
    height: If set, this will determine the total amount of vertical travel of the
      plat. Place plat at the top point. In game it will spawn at bottom.
      Overrides "lip" option.
    dmg: Damage dealt when blocked.
    speed: Determines how fast the plat moves.
    lip: *brush_lip
    targetname: If set, the trigger that points to this will raise the plat each time
      it fires. The plat raises and comes back down a second later if no player is
      on it.
    sound1to2: The sound played on start moving from state 1 to state 2.
    sound2to1: The sound played on start moving from state 2 to state 1.
    soundPos1: The sound played reached state 1.
    soundPos2: The sound played reached state 2.
    noise: The sound played repeatedly while plat is moving.
  propreplace:
    lip: {brush: plat, 'move.': 'move. Can be overridden by "height". If you use lip
      place your plat near the bottom point.'}
  proptypes:
    lip: float
    height: float
  propdefaults:
    dmg: 2
    lip: 8
    height: 0
    speed: 400
  desc: >
    Rising platform the player can ride to reach higher places. Plats must always
    be drawn in the raised position, so they will operate and be lighted correctly
    but they spawn in the lowered position.

    The plat will stay in the raised position until the player steps off.
- name: func_rotating
# bug: doesn't work when speed is not set
# bug: by default rotates around 0 0 0 instead of brush center
  extend: [chain_autonom,brush,indexmap2,mover]
  flags:
  - '-': ''
  - '-': ''
  - X_AXIS: Entity will rotate around the X axis.
  - Y_AXIS: Entity will rotate around the Y axis.
  props:
    speed: "[required] Determines how fast entity rotates."
    dmg: Damage dealt when blocked.
    # bug: parsed, but not used. No damage dealt
    # bug: trembling when blocked
    targetname: Doesn't work properly.
    # bug: resets position of entity to 0 0 0
    noise: *another_func_noise
    origin: "[required] Rotation axis position."
  propdefaults:
    speed: 400
    dmg: 2
  propreplace:
    origin: {'point.': 'point. Sets the rotation axis position.'}
  desc: >
    Solid entity that rotates continuously. Rotates on the Z axis by default.
- name: func_spawn
  extend: [chain_passive,brush,indexmap2]
  flags:
  - SPAWN_ENABLED: By default brush is present in level.
  - DONT_KILL: Disable killing on appearing.
  desc:
    Toggleable wall.
- name: func_static
# bug: is it really chain_autonomous? what effect it can do on activation?
  extend: [chain_autonom,brush,indexmap2,mover]
  props:
    gradingTexture: If set, there is the grading effect fluently appears when player comes closer.
    gradingDistance: Distance where grading effect appears.
    # bug: reverb doesn't work!
    reverbEffect: *revEffect
    reverbDistance: Distance where reverb effect appears.
    reverbIntensity: *revIntensity
  proptypes:
    gradingTexture: string (texture)
    gradingDistance: float
    reverbEffect: string
    reverbDistance: float
    reverbIntensity: float
  propdefaults:
    gradingDistance: 250
    reverbDistance: 250
    reverbIntensity: 1
  desc: >
    Static non-solid bspmodel.

    Used to add colour grading and reverb effects to specific area.
- name: func_train
# bug: can watch through train when it pushes player
# bug: incorrect movement when activated/deactivated waiting on path_corner
  extend: [chain_active,brush,indexmap2,mover]
  flags:
  - START_OFF: The train will spawn in the off state
  - BLOCK_STOPS: Train simply stops if blocked, instead of killing.
  props:
    target: >
      [required] This points to the first path_corner of the path which is also
      location of the train's origin.
    origin: "[required] Base position of train."
    speed: *brush_speed
    targetname: *toggleable
    dmg: Unused.
    # bug: do we need custom damage from train instead of hardcoded 10000?
  propdefaults:
    dmg: 2
    speed: 100
  propreplace:
    speed: {brush: train, 'moves.': 'moves. Can be overridden by path_corner speed.'}
  desc: >
    Trains are moving solids that follow a string of path_corner entities.

    Trains instakill anything in their path by default (unless BLOCK_STOPS set).

    When BLOCK_STOPS is set, trains cannot be stopped just by getting in their
    way, the player must be wedged between the train and another obstacle to block
    it.

    You must set proper "origin" coordinates. It used as base point for train brush.
    That base point moves over path_corners, i.e. you can shift the train off the path.
- name: path_corner
  extend: [chain_target,point]
  color: 7f4c00
  props:
    target: Point to next path_corner in the path.
    wait: Number of seconds func_train will pause on path corner before moving to
      next path corner.
    speed: Speed of func_train while moving to the next path corner. This will override
      the speed value of the train.
  proptypes:
    wait: float
    # possible improvement: add usual wait variance
  propdefaults:
    wait: 0
  desc: >
    Path corner entity that func_trains can be made to follow.
- name: pos_alien_intermission
# TODO: can be disabled by firing?
  extend: [chain_autonom,point]
  color: &alienColor ff3300
  props: &Inter_props
    angle: *angle
    angles: &Inter_ang Orientation.
    target: &Inter_target Alternative way to set orientation.
    onSpawn: Name of the target fired when player comes to the intermission view.
  desc: &Inter_desc >
    Point where camera will hang when player awaits spawn as alien.
    There can be many of them, game makes random choice.
- name: info_alien_intermission
  aliasof: pos_alien_intermission
  deprecated: y
- name: pos_human_intermission
# TODO: can be disabled by firing?
  extend: [chain_autonom,point]
  color: &humanColor 0033ff
  props: *Inter_props
  desc: *Inter_desc
  descreplace:
    'as alien': as human
- name: info_human_intermission
  aliasof: pos_human_intermission
  deprecated: y
- name: pos_player_intermission
# TODO: can be disabled by firing?
  extend: [chain_autonom,point]
  d3Class: idPlayerStart
  color: ff00ff
  props:
    angle: *angle
    angles: *Inter_ang
    target: *Inter_target
  desc: *Inter_desc
  descreplace:
    'awaits spawn as alien': is choosing team
- name: info_player_intermission
  aliasof: pos_player_intermission
  deprecated: y
  d3Class: idPlayerStart
- name: pos_location
# TODO: any effect on fire?
# NOTE: Doom 3 maps use info_location
  extend: [chain_autonom,point]
  d3Class: idLocationEntity
  color: 007f00
  props:
    count: >
      Color of the location text displayed in parentheses during team chat.
      0: white (default)
      1: red
      2: green
      3: yellow
      4: blue
      5: cyan
      6: magenta
      7: white
    message: Name of the location (text string). Displayed in parentheses in front
      of all team chat and order messages.
  proptypes:
    count: int
  desc: >
    Location marker used for team chats. The closest pos_location in sight
    is used for the location. If none is in sight, the closest in distance is used.
- name: target_location
  aliasof: pos_location
  d3Class: idLocationEntity
  deprecated: y
- name: pos_player_spawn
# bug: useless entity, must be deprecated
  extend: [chain_autonom,point]
  d3Class: idPlayerStart
  color: ff00ff
  desc: >
    Use pos_player_intermission instead.
- name: info_player_deathmatch
  aliasof: pos_player_spawn
  deprecated: y
  d3Class: idPlayerStart
- name: info_player_start
  aliasof: pos_player_spawn
  deprecated: y
  d3Class: idPlayerStart
- name: pos_target
  extend: [chain_target,point]
  d3Class: idTarget
  color: 007f00
  props:
    angle: *angle
    angles: Used for env_afx_teleport. Direction in which player will look when teleported.
  desc: >
    Aiming target for entities like light, gfx_portal_camera and env_afx_push.

    Used as a positional target for entities that can use directional pointing.
- name: target_position
  aliasof: pos_target
  deprecated: y
- name: info_notnull
  aliasof: pos_target
  deprecated: y
  d3Class: idStaticEntity
- name: misc_teleporter_dest
  aliasof: pos_target
  deprecated: y
  d3Class: idTarget
  color: ff7f3f
  size_min: [-32.0, -32.0, -24.0]
  size_max: [32.0, 32.0, -16.0]
- name: info_null
  aliasof: pos_target
  deprecated: y
  d3Class: idStaticEntity
  desc: >
    Same as pos_target, but used only at q3map2 stage. I.e. you can use it only for lights.
- name: target_print
# bug: deprecated, but no replacing functionality provided
  deprecated: y
  color: 007f00
  extend: [chain_passive,point]
  d3Class: idTarget
  flags:
  - HUMAN_TEAM: Only the human team players will see the message. # OK, but TODO check net game
  - ALIEN_TEAM: Only the alien team players will see the message. # OK, but TODO check net game
  - PRIVATE: Only the player that activates the target will see the message. # OK, but TODO check net game
  props:
    message: text string to print on screen.
  desc: >
    This will print a message on the center of the screen when triggered.

    By default, all the clients will see the message.
- name: target_push
# bug: "angles" + "speed" properties cannot be used. These properties can be removed though.
#   target mechanism is sufficient. Also, entity is deprecated, skip this bug?
  deprecated: y
  extend: [chain_passive,point]
  d3Class: idTarget
  color: 7f7f7f
  props:
    target: This points to the aiming entity to which the player will jump.
    targetname: >
      [required] The activating trigger points to this. Push originates from the location
      of the trigger.
  desc: >
    DO NOT USE THIS ENTITY, USE env_afx_push!

    This can be used to create jump pads and launch ramps.

    Unlike trigger_push, this is NOT client side predicted and must be activated
    by a trigger.

    To make a jump pad or launch ramp, create a trigger_multiple where the jump must
    originate. Place the target_push directly above the trigger_multiple and place
    the target_position entity at the highest point of the jump. Target the trigger_multiple
    to the target_push and target the target_push to the target_position/info_notnull.
- name: target_teleporter
  deprecated: y
  extend: [chain_passive,point]
  d3Class: idTarget
  color: 007f00
  props:
    target: This must point to a misc_teleporter_dest entity.
    speed: Player speed after teleportation.
  desc: >
    DO NOT USE THIS ENTITY, USE env_afx_teleport!

    Activating this will teleport players to the location of the targeted misc_teleporter_dest
    entity. Unlike trigger_teleport, this entity must be activated by a trigger and
    does NOT allow client prediction of events.
- name: target_hurt
  deprecated: y
  extend: [chain_passive,point]
  d3Class: idTarget
  color: ff0000
  props:
    dmg: Amount of damage to deal.
  propdefaults:
    dmg: 5
  desc: >
    DO NOT USE THIS ENTITY, USE env_afx_hurt!

    When triggered, this hurts the entity that caused the trigger.
- name: team_human_spawn
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-40.0, -40.0, -4.0]
  size_max: [40.0, 40.0, 17.0]
  props:
    angle: Player orientation after spawn.
  desc: The human spawn point.
  specials: {model: models/buildables/telenode/telenode.iqm}
- name: team_human_armoury
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-40.0, -40.0, -13.0]
  size_max: [40.0, 40.0, 50.0]
  desc: The human armoury.
  specials: {model: models/buildables/arm/arm.iqm}
- name: team_human_drill
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-15.0, -15.0, 0.0]
  size_max: [15.0, 15.0, 58.0]
  desc: The human drill.
  specials: {model: models/buildables/drill/drill.iqm}
- name: team_human_medistat
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-35.0, -35.0, -7.0]
  size_max: [35.0, 35.0, 2.0]
  desc: The human medical station.
  specials: {model: models/buildables/medistat/medistat.iqm}
- name: team_human_mgturret
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-25.0, -25.0, -20.0]
  size_max: [25.0, 25.0, 20.0]
  desc: The human machinegun turret.
  specials: {model: models/buildables/mgturret/mgturret.iqm}
- name: team_human_rocketpod
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-25.0, -25.0, -20.0]
  size_max: [25.0, 25.0, 20.0]
  desc: The human rocket pod.
  specials: {model: models/buildables/rocketpod/rocketpod.iqm}
- name: team_human_reactor
  extend: [point]
  d3Class: idSpawnableEntity
  color: *humanColor
  size_min: [-41.0, -41.0, -4.0]
  size_max: [41.0, 41.0, 100.0]
  desc: The human reactor.
  specials: {model: models/buildables/reactor/reactor.iqm}
- name: team_alien_spawn
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  props:
    angle: Player orientation after spawn.
  desc: The alien spawn point.
  specials: {model: models/buildables/eggpod/eggpod.iqm}
- name: team_alien_acid_tube
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-20.0, -20.0, -15.0]
  size_max: [20.0, 20.0, 15.0]
  desc: The alien acid tube.
  specials: {model: models/buildables/acid_tube/acid_tube.iqm}
- name: team_alien_spiker
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-20.0, -20.0, -15.0]
  size_max: [20.0, 20.0, 15.0]
  desc: The alien spiker.
  specials: {model: models/buildables/spiker/spiker.iqm}
- name: team_alien_barricade
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-35.0, -35.0, -15.0]
  size_max: [35.0, 35.0, 60.0]
  desc: The alien barricade.
  specials: {model: models/buildables/barricade/barricade.iqm}
- name: team_alien_booster
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-26.0, -26.0, -9.0]
  size_max: [26.0, 26.0, 9.0]
  desc: The alien booster.
  specials: {model: models/buildables/booster/booster.iqm}
- name: team_alien_overmind
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-45.0, -45.0, -15.0]
  size_max: [45.0, 45.0, 95.0]
  desc: The alien overmind.
  specials: {model: models/buildables/overmind/overmind.iqm}
- name: team_alien_trapper
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  desc: The alien trapper.
  specials: {model: models/buildables/trapper/trapper.iqm}
- name: team_alien_hive
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-20.0, -20.0, -20.0]
  size_max: [20.0, 20.0, 20.0]
  desc: The alien hive.
  specials: {model: models/buildables/hive/hive.iqm}
- name: team_alien_leech
  extend: [point]
  d3Class: idSpawnableEntity
  color: *alienColor
  size_min: [-40.0, -40.0, -15.0]
  size_max: [40.0, 40.0, 15.0]
  desc: The alien leech.
  specials: {model: models/buildables/leech/leech.iqm}
- name: ctrl_limited
  extend: [chain_relay,point]
  color: &ctrl_color 00b3b3
  flags:
  - SPAWN_DISABLED: &Spawn_disabled Disabled by default.
  # bug: no way to activate it in-game
  props:
    amount: Possible activation count.
  propdefaults:
    amount: 1
  desc: >
    Can be triggered limited amount of times.
    Every activation fires targets.
- name: ctrl_relay
  extend: [chain_relay,point]
  color: *ctrl_color
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  # bug: can't enable entity later in game, remove spawn_disabled at all?
  props:
    target: null
    onAct: &relay_target >
      [required] Name of the target to activate.
    wait: &relay_wait Delay before target activation.
  propdefaults:
    wait: 0
  desc: &relay_desc >
    When activated waits amount of time then activates its own targets.
- name: target_relay
  aliasof: ctrl_relay
  d3Class: idTarget
  deprecated: y
  flags: &target_relay_flags
  - ONLY_HUMANS: Can be activated only by a human.
  - ONLY_ALIENS: Can be activated only by an alien.
  - RANDOM: Ignore delay, activate random target.
  props:
    target: *relay_target
    wait: *relay_wait
  propdefaults:
    wait: 0
- name: target_delay
  aliasof: ctrl_relay
  d3Class: idTarget
  deprecated: y
  flags: *target_relay_flags
  props:
    target: *relay_target
    wait: *relay_wait
  propdefaults:
    wait: 1
- name: env_afx_ammo
  extend: [chain_autonom]
  color: 5b7c2d
  flags:
  - EVERY_SECOND: Act every second instead of every frame.
  - DISABLE_ENERGO: Disable recharging energetic weapons.
  - DISABLE_NON_ENERGO: Disable recharging non-energetic weapons.
  props:
    ammo: Amount of ammo. Values < 1 corrected to 1.
    targetname: *toggleable
  proptypes:
    ammo: int
  propdefaults:
    ammo: 1
  desc: &game_desc Gives funds to the player who activates it (e.g. via button).
  descreplace:
    funds: ammo
- name: trigger_ammo
  aliasof: env_afx_ammo
  deprecated: y
- name: env_afx_gravity
# bug: local negative (<0) gravity fights with level gravity causing player to tremble
  extend: [chain_autonom]
  color: 7f7f7f
  props:
    amount: The gravity within this entity.
    targetname: *toggleable
  propdefaults:
    amount: 800
  desc: Area with different gravity within.
- name: trigger_gravity
  aliasof: env_afx_gravity
  deprecated: y
- name: env_afx_heal
  extend: [chain_autonom]
  color: 2d7c50
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  - EVERY_SECOND: Heal every second instead of every frame.
  props:
    heal: Amount of heal. Values < 1 corrected to 1.
    targetname: *toggleable
  proptypes:
    heal: int
  propdefaults:
    heal: 5
  desc: Heals players touching entity.
- name: trigger_heal
  aliasof: env_afx_heal
  deprecated: y
- name: env_afx_hurt
# bug: can't customize sound
# it is always sound/misc/electro.wav
  extend: [chain_autonom]
  color: c81111
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  - '-': ''
  - NO_SOUND: No sound played.
  - NO_PROTECTION: Player will be hurt regardless of protection (e.g. invulnerability power-up).
  # bug: this flag intended for invulnerability quake power-up, is it actual in unv? for now it's no-effect
  - EVERY_SECOND: Damage every second instead of every frame.
  props:
    dmg: Damage dealt. Values <= 0 corrected to default value.
    targetname: *toggleable
  propdefaults:
    dmg: 5
  desc: Hurts players or buildings touching entity.
- name: trigger_hurt
  aliasof: env_afx_hurt
  deprecated: y
- name: env_afx_push
  extend: [chain_autonom]
  color: 7f7f7f
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    target: Name of the aiming position entity to which the player will jump.
      This is the highest point of the jump.
    targetname: *toggleable
    wait: Delay between triggerings.
  propdefaults:
    wait: [0.5, 0]
  desc: >
    This is used to create jump pads and launch ramps.
- name: trigger_push
  aliasof: env_afx_push
  deprecated: y
- name: env_afx_teleport
# bug: stepping into disabled teleport continuously shows flashing screen effect.
  extend: [chain_autonom]
  color: '754928'
  flags:
  - SPECTATORS_ONLY: >
      Affect only spectators.
      Spectator teleporters are not normally placed in the editor, but are created
      automatically near doors to allow spectators to move through them.
  - SPAWN_DISABLED: Teleport disabled by default.
  props:
    target: Name of the target point. You can set same targetname to many positions, they will be
      chosen randomly.
    speed: Player speed after teleportation.
    targetname: *toggleable
  propdefaults:
    speed: 400
  desc: >
    Teleports player touching entity.

    Set "angles" property of target to define player direction after teleportation.
- name: trigger_teleport
  aliasof: env_afx_teleport
  d3Class: idTrigger
  deprecated: y
- name: fx_rumble
# bug: this is not an earthquake, this is jumping
  extend: [chain_passive,point]
  color: ff0000
  props:
    amount: Duration of the quake.
    speed: Severity of the quake.
  propdefaults:
    amount: 10
    speed: 100
  desc: When triggered, this initiates a level-wide rumble effect. All players are affected.
- name: target_rumble
  aliasof: fx_rumble
  d3Class: idTarget
  deprecated: y
- name: game_end
# improvement: make it able to end game in draw with team=0 or omitted
  extend: [chain_passive,point]
  d3Class: idTrigger
  color: &game_color ff0000
  props:
    team: &Team_number 1 for aliens, 2 for humans.
  desc: When triggered, this causes an unconditional win for the team.
- name: target_alien_win
  aliasof: game_end
  d3Class: idTarget
  deprecated: y
  color: *alienColor
  props:
    team: null
  descreplace: {'the team': 'the alien team'}
- name: target_human_win
  aliasof: game_end
  d3Class: idTarget
  deprecated: y
  color: *humanColor
  props:
    team: null
  descreplace: {'the team': 'the human team'}
- name: game_funds
  extend: [chain_passive,point]
  color: *game_color
  props:
    amount: Amount of funds. 1 = 1 credit = 0.01 evo.
  propdefaults:
    amount: 0
  desc: *game_desc
- name: game_kill
  extend: [chain_passive,point]
  color: *game_color
  desc: *game_desc
  descreplace:
    'Gives funds to': 'Instantly kills'
- name: target_kill
  aliasof: game_kill
  d3Class: idTarget
  deprecated: y
- name: game_score
# possible improvement: measure amount directly in score points
  extend: [chain_passive,point]
  color: *game_color
  props:
    amount: Amount of score points. 50 = 1 score, calculated as quantity of funds
      game gives you when you earn amount of score.
  propdefaults:
    amount: 1
  desc: *game_desc
  descreplace:
    'funds': 'score points'
- name: target_score
  aliasof: game_score
  d3Class: idTarget
  deprecated: y
- name: gfx_animated_model
  extend: [chain_autonom,point]
  color: &gfx_animated_model_color ff7f3f
  size_min: [-12.0, -12.0, -12.0]
  size_max: [12.0, 12.0, 12.0]
  flags:
  - TOGGLE_VISIBILITY: Toggle entity visibility instead of animation.
  - SPAWN_STOPPED: Spawn with animation stopped.
  props:
    model: Path to a model.
    animation: >
      The guts of the entity. This is identical to an entry in an animation.cfg
      - Start Frame, Number of frames, Looping Frames, Frame rate.
    angle: *angle
    angles: Orientation.
    radius: The scale of the model compared to its original size.
    targetname: *toggleable
  proptypes:
    radius: float
  propdefaults:
    radius: 1
  propeg:
    model: 'models/mapobjects/teleporter/teleporter.md3'
    animation: [0, 30, 30, 20]
  desc: >
    Animated model entity. Not baked info level geometry.
    Can be walked through.
- name: misc_anim_model
  aliasof: gfx_animated_model
  deprecated: y
- name: misc_model
# bug: deprecated, but no replacement given
# misc_model differs from gfx_animated_model: it handled by q3map2
  deprecated: y
  extend: [point,brush]
  color: *gfx_animated_model_color
  size_min: [-12.0, -12.0, -12.0]
  size_max: [12.0, 12.0, 12.0]
  flags:
  - '-': '' # not used. key for sof2 shader renaming. If renaming if active
    # "shader" renamed to "shader_BSP". With this flag set - to "shader_RMG_BSP"
  - CLIPMODELS: Disallows walking through the model (makes it solid).
  - FORCEMETA: Use lightmap lighting for the model.
  props:
    model: >
      [q3map] Path to a custom model.
    _frame: >
      [q3map] Animation frame to pick. This differs from gfx_animated_model.animation!
    angle: *angle
    angles: >
      [q3map] Full model orientation.
    modelscale: >
      [q3map] Scale factor.
    modelscale_vec: >
      [q3map] Separate scale factor per axis.
    _remap*: >
      [q3map] Remap shaders. Any property name starting with "_remap" counts.
      Values are ; separated.
  proptypes:
    _frame: int
    modelscale: float
    modelscale_vec: vec3_float
    _remap*: string
  propdefaults:
    modelscale: 1
    modelscale_vec: [1, 1, 1]
  propeg:
    _frame: 5
    _remap*: models/buildables/tesla/tesla_main;textures/newmap/ter_dirt
  propreplace:
    angle: {'Short': '[q3map] Short'}
  desc: >
    Static model baked into level geometry by q3map2.
    Can be walked through. Not animated, but you can choose one of the frames.
- name: gfx_light_flare
  extend: [chain_autonom,point]
  color: a6a6ff
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    shader: The name of the shader of the light flare.
    angle: *angle
    angles: This reflects which direction the flare points. It is not important unless
      the second component of the radius key is employed.
    radius: >
      The radius key is a vector.

      The first component is the size of the light flare. The radius is calculated
      by taking the distance of the viewer from the light flare and dividing by this
      key, so the larger the key value, the smaller the flare. Values between 2 and
      10 are sensible.

      The second component indicates the angle around the direction the flare points
      for which it is visible. For example a value of 90 means that you can see the
      flare while infront of the entity, but not when behind it. If set to zero the
      light flare will be visible from any angle

      The third component is similar to the first except that it specifies the size
      of the light source rather than the size of the light flare itself. This is
      useful when the higher detail flare fading modes are enabled. If this is set
      to the same value as the first component, fading will commence as soon as the
      edge of the light flare is occluded by some surface between the viewer and the
      flare. If it is set larger the flare will overlap the occluding surface before
      it begins to fade.
    mindist: Minimal distance for flare to appear.
    speed: Fading time, msec. Useful only for cg_lightFlare 2.
    targetname: *toggleable
  proptypes:
    mindist: int
  propdefaults:
    mindist: 0
    speed: 200
  desc: >
    A light flare entity.
- name: misc_light_flare
  aliasof: gfx_light_flare
  deprecated: y
- name: gfx_particle_system
# bug: if player toggles entity twice quickly (->ON->OFF),
# after "wait" delay it toggles once again (->ON)
# and becomes constantly visible
  extend: [chain_autonom,point]
  color: ff7f3f
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    psName: >
      Name of particle system.
      Look at scripts/*.particle, they contain particle system effects along with their names.
    wait: Wait after toggle, then toggle again. Disabled if value <= 0.
    targetname: *toggleable
    angle: *angle
    angles: Particle system orientation.
  proptypes:
    psName: string
    wait: float # variance not used
  propdefaults:
    psName: ''
  propeg:
    psName: firebomb_subPS
  desc: >
    Particle system entity.
- name: misc_particle_system
  aliasof: gfx_particle_system
  deprecated: y
- name: gfx_portal_camera
  extend: [chain_target,point]
  d3Class: idCamera
  color: ff7f3f
  flags:
  - FRAME25: Slow rotation.
  - FRAME75: Fast rotation.
  - NO_ROTATION: Disable camera wiggling.
  props:
    targetname: >
      [required] A gfx_portal_surface portal surface indicator must point to this.
    angle: *angle
    angles: Camera orientation. 3rd component is ignored in favour of "roll".
    roll: Roll angle of camera.
    target: Point this to a pos_target entity to set the camera's pointing direction.
  desc: >
    Portal camera.

    This camera is used to project its view onto a portal surface
    in the level through the intermediary of a gfx_portal_surface entity. Use the
    "angles" key or target a pos_target entity to set the camera's pointing direction.

    Both the setting "angles" key or targeting a pos_target methods can be
    used to aim the camera. However, the pos_target method is simpler. In both
    cases, the "roll" key must be used to set the roll angle.

    By default camera is wiggling. Use spawnflags to make it rotate or stand still.
- name: misc_portal_camera
  aliasof: gfx_portal_camera
  d3Class: idCamera
  deprecated: y
- name: gfx_portal_surface
  extend: [chain_autonom,point]
  color: ff7f3f
  props:
    target: Point this to a gfx_portal_camera that "sees" the view you want to display
      on the portal.
  desc:
    Portal surface indicator. This will "lock on" the brush face closest to it
    and identify as a portal. The view displayed on the portal surface is the view
    of the gfx_portal_camera that this entity targets. Also used for mirrors (see
    Notes).

    The entity must be no farther than 64 units away from the portal surface to lock
    onto it. To make a mirror, apply the common/mirror shader to the surface, place
    this entity near it but don't target a gfx_portal_camera.
- name: misc_portal_surface
  aliasof: gfx_portal_surface
  deprecated: y
- name: gfx_shader_mod
# bug: breaks depth test after activation
# bug: cannot toggle
  extend: [chain_passive,point]
  color: ff7f3f
  props:
    shader: Name of original shader.
    replacement: Name of replacement shader.
  desc:
    Entity remaps shader when activated.
- name: sensor_buildable
  extend: [chain_active]
  d3Class: idTrigger
  color: &sensor_color 43aa00
  flags: &Some_sensors_flags
  - SPAWN_DISABLED: *Spawn_disabled
  - NEGATE: Negate sensor condition.
  props:
    wait: &sensor_wait Time in seconds until trigger becomes re-triggerable after it's been touched.
    buildables: *Buildable_list
    targetname: *toggleable
  propdefaults:
    wait: [0.5, 0]
  propreplace:
    buildables:
      'of buildables.': 'of buildables which will trigger this entity. If omitted matches all buildables.'
  desc: >
    Triggered by a buildable or subset of buildables.

    If condition is satisfied fires targets continuously with "wait" period.

    If NEGATE used, sensor still needs to be touched to activate.
- name: trigger_buildable
  aliasof: sensor_buildable
  d3Class: idTrigger
  deprecated: y
- name: sensor_creep
# bug: cannot be toggled via targetname
# possible improvement: "wait" triggering delay same as trigger_buildable
  extend: [chain_active,point]
  color: *sensor_color
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  desc: >
    Detects creep, i.e. area where the building is allowed.

    If condition is satisfied fires targets continuously.
- name: sensor_end
  extend: [chain_active,point]
  color: *sensor_color
  flags: *Some_sensors_flags
  props:
    team: *Team_number
    targetname: *toggleable
  propreplace:
    team: {'humans.': 'humans. 0 or omit to detect draw.'}
  desc: >
    Fires its targets when the team wins.
- name: trigger_win
  aliasof: sensor_end
  d3Class: idTrigger
  deprecated: y
- name: sensor_player
  extend: [chain_active]
# bug: doesn't fire with minimum set of properties (target)
# src/gamelogic/game/g_spawn_sensor.c:492 - set qtrue there?
  color: *sensor_color
  flags: *Some_sensors_flags
  props:
    equipment: *Humanequip_list
    targetname: *toggleable
    wait: *sensor_wait
    team: *Team_number
    classes: *Alienclass_list
  propdefaults:
    wait: [0.5, 0]
  propreplace:
    team: {'humans.': 'humans. Omit if you don''t want to check the team. Not affected by NEGATE.'}
    classes: {'alien classes': 'alien classes which will trigger this entity'}
    equipment: {'weapons or upgrades': 'weapons or upgrades which will trigger this entity'}
  desc: >
    Triggered by a specific class or subset of classes. If no classes key is supplied
    every class will trigger this entity.

    Triggered by a player carrying some item (weapon or upgrade) or subset of
    items. If no equipment key is supplied every human will trigger this entity.
- name: trigger_class
  aliasof: sensor_player
  d3Class: idTrigger
  deprecated: y
- name: trigger_equipment
  aliasof: sensor_player
  d3Class: idTrigger
  deprecated: y
- name: trigger_multiple
  aliasof: sensor_player
  d3Class: idTrigger
  deprecated: y
  color: *sensor_color
  flags:
  - HUMANS: Activated by humans.
  - ALIENS: Activated by aliens.
  props:
    wait: *sensor_wait
    targetname: Can also be triggered as target.
    target: &target Name of the target to fire at.
  propreplace: {}
  desc: >
    Triggered by a player.
- name: sensor_power
# bug: sensor never triggers
# src/gamelogic/game/g_spawn_sensor.c:590
  extend: [chain_active,point]
  d3Class: idTrigger
  color: *sensor_color
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
- name: sensor_stage
# possible improvement: detect substages, stages down
  extend: [chain_active,point]
  d3Class: idTrigger
  color: *sensor_color
  flags: *Some_sensors_flags
  props:
    targetname: *toggleable
    stage: &sensor_stage_stage The stage at which this entity is triggered. 2nd stage is 1, 3rd is 2.
    team: *Team_number
  propreplace:
    team: {'humans.': 'humans. Omit if you don''t want to check the team.'}
  desc: >
    Triggers when the team reaches the stage. Stage down doesn't trigger.
- name: trigger_stage
  aliasof: sensor_stage
  d3Class: idTrigger
  deprecated: y
  props:
    targetname: Can also be triggered as target.
    stage: *sensor_stage_stage
    team: *Team_number
- name: sensor_start
  extend: [chain_active,point]
  color: *sensor_color
  desc: >
    Fires the targets at game start.
- name: trigger_always
  aliasof: sensor_start
  d3Class: idTrigger
  deprecated: y
- name: sensor_support
# bug: cannot be toggled via targetname
# bug: remove this entity? there is a sensor_creep already
  extend: [chain_active,point]
  d3Class: idTrigger
  color: *sensor_color
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    team: The only valuable value is 1, i.e. aliens. Make sure you set this.
      # bug: remove this property?
  desc: >
    Detects creep, i.e. area where the building is allowed.

    If condition is satisfied fires targets continuously.
- name: sensor_timer
  extend: [chain_active,point]
  d3Class: idTrigger
  color: *sensor_color
  flags:
  - START_ON: Timer will start on in the game and continuously fire its targets.
  props:
    wait: Delay in seconds between each triggering of its targets.
    targetname: *toggleable
  desc: >
    Entity continuously fires its targets after a preset time delay.
- name: func_timer
# maybe bug: not marked as deprecated in source code
  aliasof: sensor_timer
  d3Class: idTrigger
- name: sfx_speaker
  extend: [chain_autonom,point]
  d3Class: idSpeaker
  color: 00b3b3
  flags:
  - PRESTARTED_LOOP: Same as LOOP, but speaker is active by default.
  - LOOP: Makes infinite loop. Can be toggled via targetname.
  - BROADCAST: Makes sound global, sound volume is maximal everywhere on map. Doesn't work with LOOPs.
  - ACTIVATOR_SPEAKER: Plays sound only for person who activated it.
  props:
    noise: *Sound_path
    wait: With nonzero variance part continuously starts sounds in parallel with delay defined by "wait".
      Otherwise makes no effect. Ignores LOOP flag.
    # maybe bug: src/gamelogic/cgame/cg_ents.c:377 there is a FIXME
  propdefaults:
    noise: NOSOUND
  propeg:
    noise: 'sound/noise.wav'
  desc: >
    Sound generating entity.

    The path portion value of the "noise" key can be replaced by the implicit folder
    character "*" for triggered sounds that belong to a particular player model. For
    example, if you want to create a "bottomless pit" in which the player screams
    and dies when he falls into, you would place a sensor_player over the floor
    of the pit and target a spx_speaker with it. Then, you would set the "noise"
    key to "*falling1.wav". The * character means the current player model's sound
    folder. So if your current player model is Granger, * = sound/player/builder, if your
    current player model is Battlesuit Human, * = sound/player/human_bsuit, etc. This cool feature
    provides an excellent way to create "player-specific" triggered sounds in your
    levels. Implies ACTIVATOR_SPEAKER on.
- name: target_speaker
  aliasof: sfx_speaker
  d3Class: idSpeaker
  deprecated: y
- name: _decal
  color: 00ff00
  props:
    target: Projection direction, pos_target.
  desc: >
    [q3map]-only entity that specifies a decal to be projected.
    Should contain 1 or more patch meshes (curves) and target an pos_target entity.
    The distance between the center of the _decal entity and the target is the axis and distance of projection.
- name: _skybox
  extend: [point]
  color: 4444ff
  props:
    angle: *angle
    angles: >
      [q3map] Skybox geometry orientation.
    _scale: >
      [q3map] Scale skybox geometry.
      Can be vec3_float or just float (x=y=z=value).
  proptypes:
    _scale: vec3_float
  propdefaults:
    _scale: [64, 64, 64]
  propreplace:
    angle: {'Short': '[q3map] Short'}
  desc: >
    [q3map]-only entity. Used to make skybox with additional geometry (portal sky).

    Place this entity into isolated box.

    More info: http://en.wikibooks.org/wiki/Q3Map2#skybox_tutorial
