// THIS FILE IS AUTOGENERATED, DO NOT MODIFY
//
// Unvanquished entity definitions file for level editor
//
// License:
//   Copyright (c) 2014, Daemon Developers
//   All rights reserved.
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
//    * Neither the name of the Daemon developers nor the
//      names of its contributors may be used to endorse or promote products
//      derived from this software without specific prior written permission.
//   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//   DISCLAIMED. IN NO EVENT SHALL DAEMON DEVELOPERS BE LIABLE FOR ANY
//   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//
// Contributors:
//   2014 neumond, Viech
//
// Greetings:
//   We thank these authors for contributing to Tremulous' entity definition file
//   that was used as documentation when creating this one:
//   1999 inolen, Suicide 20
//   ???? Eutectic, raYGunn, ydnar
//   2003 Tim Angus
//   2007 Warrior
//   2009 Ingar
//
// Bugs & Feedback:
//   The issue tracker for this file can be found at GitHub:
//     https://github.com/Unvanquished/unvanquished-mapeditor-support/issues
//
//   If you don't have a GitHub account, you can try to contact the recent
//   contributors via the Unvanquished forums:
//     https://forums.unvanquished.net
//   or via the developers' IRC channel:
//     irc.freenode.net, #unvanquished-dev
//   or via the discord channel:
//     https://discord.gg/pHwf5K2

/*QUAKED worldspawn (0 0 0)
------ PROPERTIES ------
BPBudgetPerMiner: Extra build points provided by Leeches and Drills.
BPInitialBudget: Initial build point budget for all teams.  OVERRIDDEN BY BPInitialBudget{Aliens|Humans}.
BPInitialBudgetAliens: Initial build point budget for the Alien team.  This takes precedence over BPInitialBudget for this team.
BPInitialBudgetHumans: Initial build point budget for the Human team.  This takes precedence over BPInitialBudget for this team.
_q3map2_cmdline: 
colorGrade: or gradingTexture - Path of color grading effect (string (texture), eg: gfx/cgrading/red-only)
deluxeMapping: bool
disabledBuildables: A comma delimited list of buildables to disable for this map. (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret, tesla,arm,medistat,drill,reactor,repeater) (string)
disabledClasses: A comma delimited list of alien classes to disable for this map. (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4) (string)
disabledEquipment: A comma delimited list of human weapons or upgrades to disable for this map. (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon, larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb) (string)
enabledust: 
fogColor: RGB (vec3_float (color))
fogDensity:  (float)
gravity: Gravity of level. (float, def: 800)
hdrRGBE: bool
mapOverBrightBits: 
message: Shown above loading bar. (string)
music: Path/name of looping .wav or .ogg file used for level's music. (string (sound), eg: music/sonic5.wav)
remapshader*: Remap shaders. Any property name starting with "remapshader" counts. Values are ; separated. (string, eg: textures/newmap/ter_rock;textures/newmap/ter_sand)
reverbEffect: Effect name. Use /testReverb <TAB> to view the list of possible values.
reverbIntensity: Intensity of reverberation. (float, 0..2)
_ambient: [q3map] Adds a constant value to overall lighting. Use is not recommended. Ambient light will have a tendency to flatten out variations in light and shade. (float, eg: 30)
_blocksize: [q3map] q3map always splits the BSP tree along the planes. Increase the blocksize using larger powers of 2 to reduce compile times on very large maps with a low structural brush density. (vec3_int, def: 1024 1024 1024)
_color: [q3map] color value for "_ambient", "_minvertexlight", "_mingridlight". (vec3_float (color), def: 1 1 1)
_farplanedist: [q3map] Limit on how many units the vis phase of compilation can see. Used in combination with level-wide fog, it can help reduce r_speeds on large, open maps. Use with "_foghull".
_foghull: [q3map] Shader to use for "fog hull." Foghull shader should be a sky shader. Omit the "textures/" prefix. Use with "_farplanedist".
_keepLights: [q3map] Keep light entities in the BSP. Normally stripped out by the BSP process and read from the .map file by the lighting phase. (int, 0 or 1, def: 0)
_mingridlight: [q3map] "_ambient" for lightgrid (entity and weapon lighting). (float, eg: 30)
_minlight: [q3map] Shorthand for setting both "_minvertexlight" and "_mingridlight". (float, eg: 30)
_minvertexlight: [q3map] "_ambient" for vertex lighting. (float, eg: 30)
_noshadersun: [q3map] Ignore q3map_sun*|sun directives in sky shaders and ONLY use entity sun lights. (int, 0 or 1, def: 0)
_style*alphagen: [q3map] Used for lights with "style" set. Star is replaced by numbers.
_style*rgbgen: [q3map] Used for lights with "style" set. Star is replaced by numbers.
gridsize: [q3map] Granularity of the lightgrid created by q3map. Values for every axis. Minimum value is 8. (vec3_float, eg: 64 64 128)
------ DESCRIPTION ------
Only used for the world.
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED light (0.651 0.651 1) (-8 -8 -8) (8 8 8) LINEAR ANGLE DARKLIGHT DARKLIGHT NOGRIDLIGHT
------ FLAGS ------
LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
ANGLE: Force angle attenuation. Useless, "_anglescale" implies this flag on.
DARKLIGHT: Unused.
DARKLIGHT: Unused.
NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting).
------ PROPERTIES ------
_color: Weighted RGB value of light color. (vec3_float (color), def: 1 1 1)
light: Intensity. (float, def: 300)
origin: Position. (vec3_float)
targetname: Setting name implies dynamic light style set. (string (targetname))
light_radius: [dynamic] Same as "light", but allows to use different radius per axis. Dynamic lights treat "light" as radius. (vec3_float)
light_scale: [dynamic] Intensity multiplicator. Can't be bigger than r_lightScale cvar. (float)
noradiosity: [dynamic] Disable radiosity (lightmap) lighting. Setting this property makes the light dynamic. This enables realtime shadows. (int, 0 or 1, def: 0)
noshadows: [dynamic] Disable casting shadows. (int, 0 or 1, def: 0)
rotation: [dynamic] 3x3 rotation matrix for frustum box. (vec9_float)
texture: [dynamic] Lighting texture.
parallel: [dynamic,parallel] Make light parallel, similar to using orthogonal projection instead of usual frustum. (int, 0 or 1, def: 0)
light_end: [dynamic,projected] Point where light must end. By default it is "light_target". (vec3_float)
light_right: [dynamic,projected] Right vector. Length of vector defines the size of far frustum pyramid edge. (vec3_float)
light_start: [dynamic,projected] Point where light must start. (vec3_float, def: 0 0 0)
light_target: [dynamic,projected] Direction vector. Length of vector defines frustum pyramid height. (vec3_float)
light_up: [dynamic,projected] Up vector. Length of vector defines the size of far frustum pyramid edge. (vec3_float)
_anglescale: [q3map] Angle attenuation coefficient for spotlights (those having target).
_deviance: [q3map] Used in pair with _samples. Jitter radius for array of lights. (float, def: 0)
_filterradius: [q3map] No attenuation within _filterradius sphere. (float, def: 0)
_samples: [q3map] Used for light jitter in pair with _deviance. Number of lights created near each other instead of the sole light source. Sum of all intensities equals to original light intensity. (int, def: 1)
_sun: [q3map] Set this key on a spotlight (those having "target") to make an infinite sun light. This can be used instead of q3map_skylight shader directive. Properties remaining useful are "target", "_color", "_deviance", "_samples", "style". (int, 0 or 1, def: 0)
fade: [q3map] Linear (only linear) light attenuation coefficient, less value - far the light goes. (float, def: 1)
radius: [q3map] Overrides the default 64 unit Radius of a spotlight at the target point. (float, def: 64)
scale: [q3map] Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60 (float, def: 1)
style: [q3map] Used for blinking lights. Number used to choose proper worldspawn entity keys with formulas. Key names are _style*rgbgen and _style*alphagen where * is replaced by style number. Read more here http://q3map2.robotrenegade.com/docs/shader_manual/lightstyles.html (int, def: 0)
target: [q3map] Lights pointed at a target will be spotlights. (string (target))
------ DESCRIPTION ------
Non-displayed point light source.
The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights.
Properties for dynamic realtime lights marked as [dynamic]. Any property marked as [projected] if set makes dynamic light projected. Projected light requires most of its properties set, such as "light_target", "light_up", "light_right".
*/

/*QUAKED lightJunior (0 0.702 0.298) (-6 -6 -6) (6 6 6) LINEAR ANGLE
------ FLAGS ------
LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
ANGLE: Force angle attenuation. Useless, "_anglescale" implies this flag on.
------ PROPERTIES ------
_color: Weighted RGB value of light color. (vec3_float (color), def: 1 1 1)
light: Intensity. (float, def: 300)
origin: Position. (vec3_float)
radius: Overrides the default 64 unit Radius of a spotlight at the target point. (float, def: 64)
_anglescale: [q3map] Angle attenuation coefficient for spotlights (those having target).
_deviance: [q3map] Used in pair with _samples. Jitter radius for array of lights. (float, def: 0)
_filterradius: [q3map] No attenuation within _filterradius sphere. (float, def: 0)
_samples: [q3map] Used for light jitter in pair with _deviance. Number of lights created near each other instead of the sole light source. Sum of all intensities equals to original light intensity. (int, def: 1)
fade: [q3map] Linear (only linear) light attenuation coefficient, less value - far the light goes. (float, def: 1)
scale: [q3map] Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60 (float, def: 1)
target: [q3map] Lights pointed at a target will be spotlights. (string (target))
------ DESCRIPTION ------
Non-displayed point light source. Unlike usual light affects only entities (lightgrid).
The -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness of entity sun lights.
*/

/*QUAKED func_bobbing (0 0.498 0.8) X_AXIS Y_AXIS
------ FLAGS ------
X_AXIS: Entity will bob along the X axis.
Y_AXIS: Entity will bob along the Y axis.
------ PROPERTIES ------
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Damage dealt when blocked. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
height: Amount of travel of the oscillation movement. (float, def: 32)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
noise: Sound played when activated via targetname. Emitted at origin. (string (sound))
origin: "model2" position. (vec3_float)
phase: Sets the start offset of the oscillation cycle. (float, 0..1, def: 0)
speed: Amount of time in seconds for one complete oscillation cycle. (float, def: 4)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Solid entity that oscillates back and forth in a linear motion. Entity bobs on the Z axis (up-down) by default.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_button (0 0.498 0.8)
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
angle: Determines moving direction of button (around Z axis: 0=+x, 90=+y, 180=-x, 270=-y; special values: up = -1, down = -2). (float (yaw), -2..360)
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
group: Name of entity group. Allows to activate all entities of group at once.
health: If set, the button must take damage (any amount) to activate. (int, 0 or 1, def: 0)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
lip: When 0, button displacement = button's size in direction of movement. Positive lip value discreases displacement, leaving lip remaining at the end of move. (float, def: 4)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
origin: "model2" position. (vec3_float)
sound1to2: Activation sound. (string (sound), eg: sound/dum.ogg, def: sound/movers/switches/button1.wav)
speed: Determines how fast the button moves. (float)
wait: Number of seconds button stays pressed. -1 = return immediately. (time_2float (time [variance]))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
When a button is touched by a player, it moves in the direction set by the "angle" key, triggers all its targets, stays pressed by an amount of time set by the "wait" key, then returns to it's original position where it can be operated again.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_destructable (0 0.498 0.8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Hidden by default. Can be shown via activation as target.
------ PROPERTIES ------
damage: Splash damage caused when destroyed. (int, def: 0)
health: Amount of damage needed to destroy this. (int, def: 100)
onDie: Name of the target fired when destroyed. (string (target))
radius: Splash damage radius. (int, def: 0)
targetname: Can be toggled as target. Causes object to appear or disappear. Even after being destructed object can appear again. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Destructable object. You can destroy this object in game. When destructed deals splash damage to everyone near it. Does not cause splash damage to builables.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_door (0 0.498 0.8) START_OPEN - CRUSHER
------ FLAGS ------
START_OPEN: The door will spawn in the open state and operate in reverse.
CRUSHER: Door will not reverse direction when blocked and will keep damaging player or building until it dies or gets out of the way.
------ PROPERTIES ------
angle: Determines moving direction of door (around Z axis: 0=+x, 90=+y, 180=-x, 270=-y; special values: up = -1, down = -2). (float (yaw))
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Damage to inflict on player when he blocks operation of door. Door will reverse direction when blocked unless CRUSHER spawnflag is set. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
health: If set, the door must take damage (any amount) to activate. (int, 0 or 1, def: 0)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
lip: When 0, door displacement = door's size in direction of movement. Positive lip value discreases displacement, leaving lip remaining at the end of move. (float, def: 8)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
origin: "model2" position. (vec3_float)
range: Door triggering range. (int, def: 72)
sound1to2: The sound played on start moving from state 1 to state 2. (string (sound))
sound2to1: The sound played on start moving from state 2 to state 1. (string (sound))
soundPos1: The sound played reached state 1. (string (sound))
soundPos2: The sound played reached state 2. (string (sound))
speed: Determines how fast the door moves. (float, def: 400)
targetname: If set, a func_button or trigger is required to activate the door. Overrides activation by damage. (string (targetname))
wait: Number of seconds before brush returns. -1 = return immediately. (time_2float (time [variance]))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Normal sliding door entity. By default, the door will activate when player walks close ("range") to it or when damage is inflicted ("health") to it.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_door_model (0 0.498 0.8)
------ PROPERTIES ------
model2: [required] The door model. (string (model), eg: models/mapobjects/pipe/pipe02.md3)
modelOrigin: [required] "model2" position. (vec3_float, def: 0 0 0)
angle: Short version of "angles". (float (yaw))
angles: Model orientation. (vec3_float (yaw pitch roll))
animation: The first frame and number of frames in the door open animation. This will be reversed for the close animation. (vec2_int, eg: [0, 10])
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
health: If set, the door must take damage (any amount) to activate. (int)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
noise: The sound played repeatedly while door is moving. (string (sound))
origin: Entity position point. (vec3_float)
range: Door triggering range. (int, def: 72)
scale: Model scale factors for each axis. (vec3_float, def: 1 1 1)
sound1to2: The sound played on start moving from state 1 to state 2. (string (sound))
sound2to1: The sound played on start moving from state 2 to state 1. (string (sound))
soundPos1: The sound played reached state 1. (string (sound))
soundPos2: The sound played reached state 2. (string (sound))
speed: The time taken for the door to change state in msec. (float, def: 200)
targetname: If set, a func_button or trigger is required to activate the door. Overrides activation by damage. (string (targetname))
wait: Number of seconds before door returns. (float, def: 2)
------ DESCRIPTION ------
A model based door entity. By default, the door will activate when player walks close to it. The opening and closing of the door is provided by an animation in the model itself.
Every func_door_model needs its model to be positioned, scaled and orientated using the modelOrigin, scale and angle/angles keys repsectively.
*/

/*QUAKED func_door_rotating (0 0.498 0.8) START_OPEN - CRUSHER REVERSE - X_AXIS Y_AXIS
------ FLAGS ------
START_OPEN: the door will spawn in the open state and operate in reverse.
CRUSHER: Door will not reverse direction when blocked and will keep damaging player or building until it dies or gets out of the way.
REVERSE: the door will open the other way.
X_AXIS: rotate around the X axis instead of the Z.
Y_AXIS: rotate around the Y axis instead of the Z.
------ PROPERTIES ------
origin: [required] Rotation axis position. (vec3_float)
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
group: Name of entity group. Allows to activate all entities of group at once.
health: If set, the door must take damage (any amount) to activate. (int, 0 or 1, def: 0)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
noise: The sound played repeatedly while door is moving. (string (sound))
rotatorAngle: The number of degrees through which to rotate. (float, def: 90)
sound1to2: The sound played on start moving from state 1 to state 2. (string (sound))
sound2to1: The sound played on start moving from state 2 to state 1. (string (sound))
soundPos1: The sound played reached state 1. (string (sound))
soundPos2: The sound played reached state 2. (string (sound))
speed: Determines how fast the door moves, in degrees/second. (float)
targetname: If set, a func_button or trigger is required to activate the door. (string (targetname))
wait: Number of seconds before door returns. -1 = return immediately. (float, def: 2)
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Rotating door entity. By default, the door will activate when player walks close to it.
Rotating door will not cause damage to player when blocked.
When activated turns around the rotation axis ("origin") to angle ("rotatorAngle") with "speed", then stops. After "wait" time door starts turning back.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_dynamic (0 0.498 0.8)
------ PROPERTIES ------
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
group: Name of entity group. Allows to activate all entities of group at once.
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
origin: "model2" position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Do not use.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_group (0 0.498 0.8)
------ PROPERTIES ------
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
_indexmap: [terrain] Path to index-colour image representing placement of different textures. (string, eg: maps/indexmap.pcx)
_layers: [terrain] Count of terrain textures. Should be equal to count of colours in indexmap palette. (int, eg: 3)
_offsets: [terrain] Height offset for each layer. (float_array)
_shader: [terrain] Name of metashader. Template for indexed shader names. Note: omit the "textures/" prefix. (string, eg: mymap/terrain)
------ DESCRIPTION ------
This is not an entity as such. It is strictly an editor utility to group world brushes and patches together for convenience (selecting, moving, copying, etc). You cannot group entities with this.
The TAB key can be used to flip through the component pieces of a selected func_group entity, isolating individual components.

For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
For [terrain] read http://icculus.org/gtkradiant/documentation/Terrain_Manual/start.html [terrain] is done entirely by [q3map]. Don't forget to set q3map_indexmap in shader.
*/

/*QUAKED func_pendulum (0 0.498 0.8)
------ PROPERTIES ------
origin: [required] Rotation axis position. (vec3_float, def: 0 0 0)
angle: Short version of "angles". (float (yaw), -180..180, def: 0)
angles: Orienting pendulum. (vec3_float (yaw pitch roll), def: 0 0 0)
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Damage dealt when blocked. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
noise: Sound played when activated via targetname. Emitted at origin. (string (sound))
phase: Sets the start offset of the swinging cycle. (float, 0..1, def: 0)
speed: Angle of swing arc in either direction from initial position. (float, def: 30)
targetname: Doesn't work properly. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Solid entity that describes a pendulum back and forth rotation movement. Rotates on the X axis by default. Pendulum frequency is a physical constant based on the length of the beam and gravity. Blocking the pendulum instantly kills a player.
The speed of swing (frequency) is not adjustable.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_plat (0 0.498 0.8) DONT_WAIT - CRUSHER
------ FLAGS ------
DONT_WAIT: The platform will not wait for a client to leave before returning to its original position.
CRUSHER: Door will not reverse direction when blocked and will keep damaging player or building until it dies or gets out of the way.
------ PROPERTIES ------
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Damage dealt when blocked. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
height: If set, this will determine the total amount of vertical travel of the plat. Place plat at the top point. In game it will spawn at bottom. Overrides "lip" option. (float, def: 0)
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
lip: When 0, plat displacement = plat's size in direction of movement. Positive lip value discreases displacement, leaving lip remaining at the end of move. Can be overridden by "height". If you use lip place your plat near the bottom point. (float, def: 8)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
noise: The sound played repeatedly while plat is moving. (string (sound))
origin: "model2" position. (vec3_float)
sound1to2: The sound played on start moving from state 1 to state 2. (string (sound))
sound2to1: The sound played on start moving from state 2 to state 1. (string (sound))
soundPos1: The sound played reached state 1. (string (sound))
soundPos2: The sound played reached state 2. (string (sound))
speed: Determines how fast the plat moves. (float, def: 400)
targetname: If set, the trigger that points to this will raise the plat each time it fires. The plat raises and comes back down a second later if no player is on it. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Rising platform the player can ride to reach higher places. Plats must always be drawn in the raised position, so they will operate and be lighted correctly but they spawn in the lowered position.
The plat will stay in the raised position until the player steps off.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_rotating (0 0.498 0.8) - - X_AXIS Y_AXIS
------ FLAGS ------
X_AXIS: Entity will rotate around the X axis.
Y_AXIS: Entity will rotate around the Y axis.
------ PROPERTIES ------
origin: [required] Rotation axis position. (vec3_float)
speed: [required] Determines how fast entity rotates. (float, def: 400)
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Damage dealt when blocked. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
noise: Sound played when activated via targetname. Emitted at origin. (string (sound))
targetname: Doesn't work properly. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Solid entity that rotates continuously. Rotates on the Z axis by default.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_spawn (0 0.498 0.8) SPAWN_ENABLED DONT_KILL
------ FLAGS ------
SPAWN_ENABLED: By default brush is present in level.
DONT_KILL: Disable killing on appearing.
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Toggleable wall.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_static (0 0.498 0.8)
------ PROPERTIES ------
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
gradingDistance: Distance where grading effect appears. (float, def: 250)
gradingTexture: If set, there is the grading effect fluently appears when player comes closer. (string (texture))
group: Name of entity group. Allows to activate all entities of group at once.
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
origin: "model2" position. (vec3_float)
reverbDistance: Distance where reverb effect appears. (float, def: 250)
reverbEffect: Effect name. Use /testReverb <TAB> to view the list of possible values. (string)
reverbIntensity: Intensity of reverberation. (float, def: 1)
targetname: Can possibly be fired. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Static non-solid bspmodel.
Used to add colour grading and reverb effects to specific area.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED func_train (0 0.498 0.8) START_OFF BLOCK_STOPS
------ FLAGS ------
START_OFF: The train will spawn in the off state
BLOCK_STOPS: Train simply stops if blocked, instead of killing.
------ PROPERTIES ------
origin: [required] Base position of train. (vec3_float)
target: [required] This points to the first path_corner of the path which is also location of the train's origin. (string (target))
color: Colour of emitted light. Emission activated by either color or light set. Don't forget to set origin. (vec3_float (color), def: 1 1 1)
dmg: Unused. (int, def: 2)
group: Name of entity group. Allows to activate all entities of group at once.
light: Light emitting intensity. Emission activated by either color or light set. Don't forget to set origin. (float, def: 100)
model2: Path to custom model attached to entity. Don't forget to set "origin". (string (model))
speed: Determines how fast the train moves. Can be overridden by path_corner speed. (float, def: 100)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
------ DESCRIPTION ------
Trains are moving solids that follow a string of path_corner entities.
Trains instakill anything in their path by default (unless BLOCK_STOPS set).
When BLOCK_STOPS is set, trains cannot be stopped just by getting in their way, the player must be wedged between the train and another obstacle to block it.
You must set proper "origin" coordinates. It used as base point for train brush. That base point moves over path_corners, i.e. you can shift the train off the path.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
Entity supports [terrain] properties. They're not so useful here, but you can refer to func_group for descriptions.
*/

/*QUAKED path_corner (0.498 0.298 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
origin: Position. (vec3_float)
speed: Speed of func_train while moving to the next path corner. This will override the speed value of the train. (float)
target: Point to next path_corner in the path. (string (target))
wait: Number of seconds func_train will pause on path corner before moving to next path corner. (float, def: 0)
------ DESCRIPTION ------
Path corner entity that func_trains can be made to follow.
*/

/*QUAKED pos_alien_intermission (1 0.2 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
onSpawn: Name of the target fired when player comes to the intermission view. (string (target))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player awaits spawn as alien. There can be many of them, game makes random choice.
*/

/*QUAKED info_alien_intermission (1 0.2 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_alien_intermission
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
onSpawn: Name of the target fired when player comes to the intermission view. (string (target))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player awaits spawn as alien. There can be many of them, game makes random choice.
*/

/*QUAKED pos_human_intermission (0 0.2 1) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
onSpawn: Name of the target fired when player comes to the intermission view. (string (target))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player awaits spawn as human. There can be many of them, game makes random choice.
*/

/*QUAKED info_human_intermission (0 0.2 1) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_human_intermission
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
onSpawn: Name of the target fired when player comes to the intermission view. (string (target))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player awaits spawn as human. There can be many of them, game makes random choice.
*/

/*QUAKED pos_player_intermission (1 0 1) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player is choosing team. There can be many of them, game makes random choice.
*/

/*QUAKED info_player_intermission (1 0 1) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_player_intermission
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
target: Alternative way to set orientation. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Point where camera will hang when player is choosing team. There can be many of them, game makes random choice.
*/

/*QUAKED pos_location (0 0.498 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
count: Color of the location text displayed in parentheses during team chat. 0: white (default) 1: red 2: green 3: yellow 4: blue 5: cyan 6: magenta 7: white (int)
message: Name of the location (text string). Displayed in parentheses in front of all team chat and order messages. (string)
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Location marker used for team chats. The closest pos_location in sight is used for the location. If none is in sight, the closest in distance is used.
*/

/*QUAKED target_location (0 0.498 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_location
------ PROPERTIES ------
count: Color of the location text displayed in parentheses during team chat. 0: white (default) 1: red 2: green 3: yellow 4: blue 5: cyan 6: magenta 7: white (int)
message: Name of the location (text string). Displayed in parentheses in front of all team chat and order messages. (string)
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Location marker used for team chats. The closest pos_location in sight is used for the location. If none is in sight, the closest in distance is used.
*/

/*QUAKED pos_player_spawn (1 0 1) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Use pos_player_intermission instead.
*/

/*QUAKED info_player_deathmatch (1 0 1) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_player_spawn
------ PROPERTIES ------
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Use pos_player_intermission instead.
*/

/*QUAKED info_player_start (1 0 1) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_player_spawn
------ PROPERTIES ------
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Use pos_player_intermission instead.
*/

/*QUAKED pos_target (0 0.498 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Used for env_afx_teleport. Direction in which player will look when teleported. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Aiming target for entities like light, gfx_portal_camera and env_afx_push.
Used as a positional target for entities that can use directional pointing.
*/

/*QUAKED target_position (0 0.498 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_target
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Used for env_afx_teleport. Direction in which player will look when teleported. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Aiming target for entities like light, gfx_portal_camera and env_afx_push.
Used as a positional target for entities that can use directional pointing.
*/

/*QUAKED info_notnull (0 0.498 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_target
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Used for env_afx_teleport. Direction in which player will look when teleported. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Aiming target for entities like light, gfx_portal_camera and env_afx_push.
Used as a positional target for entities that can use directional pointing.
*/

/*QUAKED misc_teleporter_dest (1 0.498 0.247) (-32 -32 -24) (32 32 -16)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_target
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Used for env_afx_teleport. Direction in which player will look when teleported. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Aiming target for entities like light, gfx_portal_camera and env_afx_push.
Used as a positional target for entities that can use directional pointing.
*/

/*QUAKED info_null (0 0.498 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: pos_target
------ PROPERTIES ------
targetname: [required] Must be someone's target for aiming. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Used for env_afx_teleport. Direction in which player will look when teleported. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Same as pos_target, but used only at q3map2 stage. I.e. you can use it only for lights.
*/

/*QUAKED target_print (0 0.498 0) (-8 -8 -8) (8 8 8) HUMAN_TEAM ALIEN_TEAM PRIVATE
DEPRECATED! DEPRECATED! DEPRECATED!
------ FLAGS ------
HUMAN_TEAM: Only the human team players will see the message.
ALIEN_TEAM: Only the alien team players will see the message.
PRIVATE: Only the player that activates the target will see the message.
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
message: text string to print on screen. (string)
origin: Position. (vec3_float)
------ DESCRIPTION ------
This will print a message on the center of the screen when triggered.
By default, all the clients will see the message.
*/

/*QUAKED target_push (0.498 0.498 0.498) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
------ PROPERTIES ------
targetname: [required] The activating trigger points to this. Push originates from the location of the trigger. (string (targetname))
origin: Position. (vec3_float)
target: This points to the aiming entity to which the player will jump. (string (target))
------ DESCRIPTION ------
DO NOT USE THIS ENTITY, USE env_afx_push!
This can be used to create jump pads and launch ramps.
Unlike trigger_push, this is NOT client side predicted and must be activated by a trigger.
To make a jump pad or launch ramp, create a trigger_multiple where the jump must originate. Place the target_push directly above the trigger_multiple and place the target_position entity at the highest point of the jump. Target the trigger_multiple to the target_push and target the target_push to the target_position/info_notnull.
*/

/*QUAKED target_teleporter (0 0.498 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
speed: Player speed after teleportation. (float)
target: This must point to a misc_teleporter_dest entity. (string (target))
------ DESCRIPTION ------
DO NOT USE THIS ENTITY, USE env_afx_teleport!
Activating this will teleport players to the location of the targeted misc_teleporter_dest entity. Unlike trigger_teleport, this entity must be activated by a trigger and does NOT allow client prediction of events.
*/

/*QUAKED target_hurt (1 0 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
dmg: Amount of damage to deal. (int, def: 5)
origin: Position. (vec3_float)
------ DESCRIPTION ------
DO NOT USE THIS ENTITY, USE env_afx_hurt!
When triggered, this hurts the entity that caused the trigger.
*/

/*QUAKED team_human_spawn (0 0.2 1) (-40 -40 -4) (40 40 17)
------ PROPERTIES ------
angle: Player orientation after spawn. (float (yaw))
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human spawn point.
model="models/buildables/telenode/telenode.iqm"
*/

/*QUAKED team_human_armoury (0 0.2 1) (-40 -40 -13) (40 40 50)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human armoury.
model="models/buildables/arm/arm.iqm"
*/

/*QUAKED team_human_drill (0 0.2 1) (-15 -15 0) (15 15 58)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human drill.
model="models/buildables/drill/drill.iqm"
*/

/*QUAKED team_human_medistat (0 0.2 1) (-35 -35 -7) (35 35 2)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human medical station.
model="models/buildables/medistat/medistat.iqm"
*/

/*QUAKED team_human_mgturret (0 0.2 1) (-25 -25 -20) (25 25 20)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human machinegun turret.
model="models/buildables/mgturret/mgturret.iqm"
*/

/*QUAKED team_human_rocketpod (0 0.2 1) (-25 -25 -20) (25 25 20)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human rocket pod.
model="models/buildables/rocketpod/rocketpod.iqm"
*/

/*QUAKED team_human_reactor (0 0.2 1) (-41 -41 -4) (41 41 100)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The human reactor.
model="models/buildables/reactor/reactor.iqm"
*/

/*QUAKED team_alien_spawn (1 0.2 0) (-15 -15 -15) (15 15 15)
------ PROPERTIES ------
angle: Player orientation after spawn. (float (yaw))
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien spawn point.
model="models/buildables/eggpod/eggpod.iqm"
*/

/*QUAKED team_alien_acid_tube (1 0.2 0) (-20 -20 -15) (20 20 15)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien acid tube.
model="models/buildables/acid_tube/acid_tube.iqm"
*/

/*QUAKED team_alien_spiker (1 0.2 0) (-20 -20 -15) (20 20 15)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien spiker.
model="models/buildables/spiker/spiker.iqm"
*/

/*QUAKED team_alien_barricade (1 0.2 0) (-35 -35 -15) (35 35 60)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien barricade.
model="models/buildables/barricade/barricade.iqm"
*/

/*QUAKED team_alien_booster (1 0.2 0) (-26 -26 -9) (26 26 9)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien booster.
model="models/buildables/booster/booster.iqm"
*/

/*QUAKED team_alien_overmind (1 0.2 0) (-45 -45 -15) (45 45 95)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien overmind.
model="models/buildables/overmind/overmind.iqm"
*/

/*QUAKED team_alien_trapper (1 0.2 0) (-15 -15 -15) (15 15 15)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien trapper.
model="models/buildables/trapper/trapper.iqm"
*/

/*QUAKED team_alien_hive (1 0.2 0) (-20 -20 -20) (20 20 20)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien hive.
model="models/buildables/hive/hive.iqm"
*/

/*QUAKED team_alien_leech (1 0.2 0) (-40 -40 -15) (40 40 15)
------ PROPERTIES ------
origin: Position. (vec3_float)
------ DESCRIPTION ------
The alien leech.
model="models/buildables/leech/leech.iqm"
*/

/*QUAKED ctrl_limited (0 0.702 0.702) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Possible activation count. (int, def: 1)
origin: Position. (vec3_float)
------ DESCRIPTION ------
Can be triggered limited amount of times. Every activation fires targets.
*/

/*QUAKED ctrl_relay (0 0.702 0.702) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
onAct: [required] Name of the target to activate. (string (target))
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
wait: Delay before target activation. (time_2float (time [variance]), def: 0)
------ DESCRIPTION ------
When activated waits amount of time then activates its own targets.
*/

/*QUAKED target_relay (0 0.702 0.702) (-8 -8 -8) (8 8 8) ONLY_HUMANS ONLY_ALIENS RANDOM
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: ctrl_relay
------ FLAGS ------
ONLY_HUMANS: Can be activated only by a human.
ONLY_ALIENS: Can be activated only by an alien.
RANDOM: Ignore delay, activate random target.
------ PROPERTIES ------
target: [required] Name of the target to activate. (string (target))
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
wait: Delay before target activation. (time_2float (time [variance]), def: 0)
------ DESCRIPTION ------
When activated waits amount of time then activates its own targets.
*/

/*QUAKED target_delay (0 0.702 0.702) (-8 -8 -8) (8 8 8) ONLY_HUMANS ONLY_ALIENS RANDOM
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: ctrl_relay
------ FLAGS ------
ONLY_HUMANS: Can be activated only by a human.
ONLY_ALIENS: Can be activated only by an alien.
RANDOM: Ignore delay, activate random target.
------ PROPERTIES ------
target: [required] Name of the target to activate. (string (target))
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
wait: Delay before target activation. (time_2float (time [variance]), def: 1)
------ DESCRIPTION ------
When activated waits amount of time then activates its own targets.
*/

/*QUAKED env_afx_ammo (0.357 0.486 0.176) EVERY_SECOND DISABLE_ENERGO DISABLE_NON_ENERGO
------ FLAGS ------
EVERY_SECOND: Act every second instead of every frame.
DISABLE_ENERGO: Disable recharging energetic weapons.
DISABLE_NON_ENERGO: Disable recharging non-energetic weapons.
------ PROPERTIES ------
ammo: Amount of ammo. Values < 1 corrected to 1. (int, def: 1)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Gives ammo to the player who activates it (e.g. via button).
*/

/*QUAKED trigger_ammo (0.357 0.486 0.176) EVERY_SECOND DISABLE_ENERGO DISABLE_NON_ENERGO
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_ammo
------ FLAGS ------
EVERY_SECOND: Act every second instead of every frame.
DISABLE_ENERGO: Disable recharging energetic weapons.
DISABLE_NON_ENERGO: Disable recharging non-energetic weapons.
------ PROPERTIES ------
ammo: Amount of ammo. Values < 1 corrected to 1. (int, def: 1)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Gives ammo to the player who activates it (e.g. via button).
*/

/*QUAKED env_afx_gravity (0.498 0.498 0.498)
------ PROPERTIES ------
amount: The gravity within this entity. (int, def: 800)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Area with different gravity within.
*/

/*QUAKED trigger_gravity (0.498 0.498 0.498)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_gravity
------ PROPERTIES ------
amount: The gravity within this entity. (int, def: 800)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Area with different gravity within.
*/

/*QUAKED env_afx_heal (0.176 0.486 0.314) SPAWN_DISABLED EVERY_SECOND
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
EVERY_SECOND: Heal every second instead of every frame.
------ PROPERTIES ------
heal: Amount of heal. Values < 1 corrected to 1. (int, def: 5)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Heals players touching entity.
*/

/*QUAKED trigger_heal (0.176 0.486 0.314) SPAWN_DISABLED EVERY_SECOND
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_heal
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
EVERY_SECOND: Heal every second instead of every frame.
------ PROPERTIES ------
heal: Amount of heal. Values < 1 corrected to 1. (int, def: 5)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Heals players touching entity.
*/

/*QUAKED env_afx_hurt (0.784 0.067 0.067) SPAWN_DISABLED - NO_SOUND NO_PROTECTION EVERY_SECOND
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NO_SOUND: No sound played.
NO_PROTECTION: Player will be hurt regardless of protection (e.g. invulnerability power-up).
EVERY_SECOND: Damage every second instead of every frame.
------ PROPERTIES ------
dmg: Damage dealt. Values <= 0 corrected to default value. (int, def: 5)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Hurts players or buildings touching entity.
*/

/*QUAKED trigger_hurt (0.784 0.067 0.067) SPAWN_DISABLED - NO_SOUND NO_PROTECTION EVERY_SECOND
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_hurt
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NO_SOUND: No sound played.
NO_PROTECTION: Player will be hurt regardless of protection (e.g. invulnerability power-up).
EVERY_SECOND: Damage every second instead of every frame.
------ PROPERTIES ------
dmg: Damage dealt. Values <= 0 corrected to default value. (int, def: 5)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Hurts players or buildings touching entity.
*/

/*QUAKED env_afx_push (0.498 0.498 0.498) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: Name of the aiming position entity to which the player will jump. This is the highest point of the jump. (string (target))
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Delay between triggerings. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
This is used to create jump pads and launch ramps.
*/

/*QUAKED trigger_push (0.498 0.498 0.498) SPAWN_DISABLED
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_push
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: Name of the aiming position entity to which the player will jump. This is the highest point of the jump. (string (target))
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Delay between triggerings. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
This is used to create jump pads and launch ramps.
*/

/*QUAKED env_afx_teleport (0.459 0.286 0.157) SPECTATORS_ONLY SPAWN_DISABLED
------ FLAGS ------
SPECTATORS_ONLY: Affect only spectators. Spectator teleporters are not normally placed in the editor, but are created automatically near doors to allow spectators to move through them.

SPAWN_DISABLED: Teleport disabled by default.
------ PROPERTIES ------
speed: Player speed after teleportation. (float, def: 400)
target: Name of the target point. You can set same targetname to many positions, they will be chosen randomly. (string (target))
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Teleports player touching entity.
Set "angles" property of target to define player direction after teleportation.
*/

/*QUAKED trigger_teleport (0.459 0.286 0.157) SPECTATORS_ONLY SPAWN_DISABLED
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: env_afx_teleport
------ FLAGS ------
SPECTATORS_ONLY: Affect only spectators. Spectator teleporters are not normally placed in the editor, but are created automatically near doors to allow spectators to move through them.

SPAWN_DISABLED: Teleport disabled by default.
------ PROPERTIES ------
speed: Player speed after teleportation. (float, def: 400)
target: Name of the target point. You can set same targetname to many positions, they will be chosen randomly. (string (target))
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Teleports player touching entity.
Set "angles" property of target to define player direction after teleportation.
*/

/*QUAKED fx_rumble (1 0 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Duration of the quake. (int, def: 10)
origin: Position. (vec3_float)
speed: Severity of the quake. (float, def: 100)
------ DESCRIPTION ------
When triggered, this initiates a level-wide rumble effect. All players are affected.
*/

/*QUAKED target_rumble (1 0 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: fx_rumble
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Duration of the quake. (int, def: 10)
origin: Position. (vec3_float)
speed: Severity of the quake. (float, def: 100)
------ DESCRIPTION ------
When triggered, this initiates a level-wide rumble effect. All players are affected.
*/

/*QUAKED game_end (1 0 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
team: 1 for aliens, 2 for humans. (int)
------ DESCRIPTION ------
When triggered, this causes an unconditional win for the team.
*/

/*QUAKED target_alien_win (1 0.2 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: game_end
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
------ DESCRIPTION ------
When triggered, this causes an unconditional win for the alien team.
*/

/*QUAKED target_human_win (0 0.2 1) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: game_end
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
------ DESCRIPTION ------
When triggered, this causes an unconditional win for the human team.
*/

/*QUAKED game_funds (1 0 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Amount of funds. 1 = 1 credit = 0.01 evo. (int, def: 0)
origin: Position. (vec3_float)
------ DESCRIPTION ------
Gives funds to the player who activates it (e.g. via button).
*/

/*QUAKED game_kill (1 0 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Instantly kills the player who activates it (e.g. via button).
*/

/*QUAKED target_kill (1 0 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: game_kill
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Instantly kills the player who activates it (e.g. via button).
*/

/*QUAKED game_score (1 0 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Amount of score points. 50 = 1 score, calculated as quantity of funds game gives you when you earn amount of score. (int, def: 1)
origin: Position. (vec3_float)
------ DESCRIPTION ------
Gives score points to the player who activates it (e.g. via button).
*/

/*QUAKED target_score (1 0 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: game_score
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
amount: Amount of score points. 50 = 1 score, calculated as quantity of funds game gives you when you earn amount of score. (int, def: 1)
origin: Position. (vec3_float)
------ DESCRIPTION ------
Gives score points to the player who activates it (e.g. via button).
*/

/*QUAKED gfx_animated_model (1 0.498 0.247) (-12 -12 -12) (12 12 12) TOGGLE_VISIBILITY SPAWN_STOPPED
------ FLAGS ------
TOGGLE_VISIBILITY: Toggle entity visibility instead of animation.
SPAWN_STOPPED: Spawn with animation stopped.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
animation: The guts of the entity. This is identical to an entry in an animation.cfg - Start Frame, Number of frames, Looping Frames, Frame rate. (vec4_float (start count loopbackcount framerate), eg: 0 30 30 20)
model: Path to a model. (string (model), eg: models/mapobjects/teleporter/teleporter.md3)
origin: Position. (vec3_float)
radius: The scale of the model compared to its original size. (float, def: 1)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Animated model entity. Not baked info level geometry. Can be walked through.
*/

/*QUAKED misc_anim_model (1 0.498 0.247) (-12 -12 -12) (12 12 12) TOGGLE_VISIBILITY SPAWN_STOPPED
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: gfx_animated_model
------ FLAGS ------
TOGGLE_VISIBILITY: Toggle entity visibility instead of animation.
SPAWN_STOPPED: Spawn with animation stopped.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Orientation. (vec3_float (yaw pitch roll))
animation: The guts of the entity. This is identical to an entry in an animation.cfg - Start Frame, Number of frames, Looping Frames, Frame rate. (vec4_float (start count loopbackcount framerate), eg: 0 30 30 20)
model: Path to a model. (string (model), eg: models/mapobjects/teleporter/teleporter.md3)
origin: Position. (vec3_float)
radius: The scale of the model compared to its original size. (float, def: 1)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
Animated model entity. Not baked info level geometry. Can be walked through.
*/

/*QUAKED misc_model (1 0.498 0.247) (-12 -12 -12) (12 12 12) - CLIPMODELS FORCEMETA
DEPRECATED! DEPRECATED! DEPRECATED!
------ FLAGS ------
CLIPMODELS: Disallows walking through the model (makes it solid).
FORCEMETA: Use lightmap lighting for the model.
------ PROPERTIES ------
angle: [q3map] Short version of "angles". (float (yaw))
origin: Position. (vec3_float)
_celshader: [q3map] Sets the cel shader used for this geometry. Note: omit the "textures/" prefix. Example: http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html (string, eg: mymap/ink)
_cs: [q3map] or "_castShadows". Group number entity cast shadow to. Negative value uses same group but disables world. 0 disables shadow casting. (int)
_frame: [q3map] Animation frame to pick. This differs from gfx_animated_model.animation! (int, eg: 5)
_lightmapscale: [q3map] Value scaling the resolution of lightmaps. Lesser value gives bigger resolution. (float, def: 1)
_remap*: [q3map] Remap shaders. Any property name starting with "_remap" counts. Values are ; separated. (string, eg: models/buildables/tesla/tesla_main;textures/newmap/ter_dirt)
_rs: [q3map] or "_receiveShadows". Group number entity receive shadow from. Negative value uses same group but disables world. 0 disables shadow receiving. (int)
angles: [q3map] Full model orientation. (vec3_float (yaw pitch roll))
model: [q3map] Path to a custom model. (string (model))
modelscale: [q3map] Scale factor. (float, def: 1)
modelscale_vec: [q3map] Separate scale factor per axis. (vec3_float, def: 1 1 1)
------ DESCRIPTION ------
Static model baked into level geometry by q3map2. Can be walked through. Not animated, but you can choose one of the frames.
For "_celshader" read http://q3map2.robotrenegade.com/docs/shader_manual/cel-shading.html
*/

/*QUAKED gfx_light_flare (0.651 0.651 1) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: This reflects which direction the flare points. It is not important unless the second component of the radius key is employed. (vec3_float (yaw pitch roll))
mindist: Minimal distance for flare to appear. (int, def: 0)
origin: Position. (vec3_float)
radius: The radius key is a vector.
The first component is the size of the light flare. The radius is calculated by taking the distance of the viewer from the light flare and dividing by this key, so the larger the key value, the smaller the flare. Values between 2 and 10 are sensible.
The second component indicates the angle around the direction the flare points for which it is visible. For example a value of 90 means that you can see the flare while infront of the entity, but not when behind it. If set to zero the light flare will be visible from any angle
The third component is similar to the first except that it specifies the size of the light source rather than the size of the light flare itself. This is useful when the higher detail flare fading modes are enabled. If this is set to the same value as the first component, fading will commence as soon as the edge of the light flare is occluded by some surface between the viewer and the flare. If it is set larger the flare will overlap the occluding surface before it begins to fade. (vec3_float)
shader: The name of the shader of the light flare. (string (texture))
speed: Fading time, msec. Useful only for cg_lightFlare 2. (float, def: 200)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
A light flare entity.
*/

/*QUAKED misc_light_flare (0.651 0.651 1) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: gfx_light_flare
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: This reflects which direction the flare points. It is not important unless the second component of the radius key is employed. (vec3_float (yaw pitch roll))
mindist: Minimal distance for flare to appear. (int, def: 0)
origin: Position. (vec3_float)
radius: The radius key is a vector.
The first component is the size of the light flare. The radius is calculated by taking the distance of the viewer from the light flare and dividing by this key, so the larger the key value, the smaller the flare. Values between 2 and 10 are sensible.
The second component indicates the angle around the direction the flare points for which it is visible. For example a value of 90 means that you can see the flare while infront of the entity, but not when behind it. If set to zero the light flare will be visible from any angle
The third component is similar to the first except that it specifies the size of the light source rather than the size of the light flare itself. This is useful when the higher detail flare fading modes are enabled. If this is set to the same value as the first component, fading will commence as soon as the edge of the light flare is occluded by some surface between the viewer and the flare. If it is set larger the flare will overlap the occluding surface before it begins to fade. (vec3_float)
shader: The name of the shader of the light flare. (string (texture))
speed: Fading time, msec. Useful only for cg_lightFlare 2. (float, def: 200)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
------ DESCRIPTION ------
A light flare entity.
*/

/*QUAKED gfx_particle_system (1 0.498 0.247) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Particle system orientation. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
psName: Name of particle system. Look at scripts/*.particle, they contain particle system effects along with their names. (string, eg: firebomb_subPS, def: )
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Wait after toggle, then toggle again. Disabled if value <= 0. (float)
------ DESCRIPTION ------
Particle system entity.
*/

/*QUAKED misc_particle_system (1 0.498 0.247) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: gfx_particle_system
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
angle: Short version of "angles". (float (yaw))
angles: Particle system orientation. (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
psName: Name of particle system. Look at scripts/*.particle, they contain particle system effects along with their names. (string, eg: firebomb_subPS, def: )
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Wait after toggle, then toggle again. Disabled if value <= 0. (float)
------ DESCRIPTION ------
Particle system entity.
*/

/*QUAKED gfx_portal_camera (1 0.498 0.247) (-8 -8 -8) (8 8 8) FRAME25 FRAME75 NO_ROTATION
------ FLAGS ------
FRAME25: Slow rotation.
FRAME75: Fast rotation.
NO_ROTATION: Disable camera wiggling.
------ PROPERTIES ------
targetname: [required] A gfx_portal_surface portal surface indicator must point to this. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Camera orientation. 3rd component is ignored in favour of "roll". (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
roll: Roll angle of camera.
target: Point this to a pos_target entity to set the camera's pointing direction. (string (target))
------ DESCRIPTION ------
Portal camera.
This camera is used to project its view onto a portal surface in the level through the intermediary of a gfx_portal_surface entity. Use the "angles" key or target a pos_target entity to set the camera's pointing direction.
Both the setting "angles" key or targeting a pos_target methods can be used to aim the camera. However, the pos_target method is simpler. In both cases, the "roll" key must be used to set the roll angle.
By default camera is wiggling. Use spawnflags to make it rotate or stand still.
*/

/*QUAKED misc_portal_camera (1 0.498 0.247) (-8 -8 -8) (8 8 8) FRAME25 FRAME75 NO_ROTATION
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: gfx_portal_camera
------ FLAGS ------
FRAME25: Slow rotation.
FRAME75: Fast rotation.
NO_ROTATION: Disable camera wiggling.
------ PROPERTIES ------
targetname: [required] A gfx_portal_surface portal surface indicator must point to this. (string (targetname))
angle: Short version of "angles". (float (yaw))
angles: Camera orientation. 3rd component is ignored in favour of "roll". (vec3_float (yaw pitch roll))
origin: Position. (vec3_float)
roll: Roll angle of camera.
target: Point this to a pos_target entity to set the camera's pointing direction. (string (target))
------ DESCRIPTION ------
Portal camera.
This camera is used to project its view onto a portal surface in the level through the intermediary of a gfx_portal_surface entity. Use the "angles" key or target a pos_target entity to set the camera's pointing direction.
Both the setting "angles" key or targeting a pos_target methods can be used to aim the camera. However, the pos_target method is simpler. In both cases, the "roll" key must be used to set the roll angle.
By default camera is wiggling. Use spawnflags to make it rotate or stand still.
*/

/*QUAKED gfx_portal_surface (1 0.498 0.247) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
origin: Position. (vec3_float)
target: Point this to a gfx_portal_camera that "sees" the view you want to display on the portal. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Portal surface indicator. This will "lock on" the brush face closest to it and identify as a portal. The view displayed on the portal surface is the view of the gfx_portal_camera that this entity targets. Also used for mirrors (see Notes).
The entity must be no farther than 64 units away from the portal surface to lock onto it. To make a mirror, apply the common/mirror shader to the surface, place this entity near it but don't target a gfx_portal_camera.
*/

/*QUAKED misc_portal_surface (1 0.498 0.247) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: gfx_portal_surface
------ PROPERTIES ------
origin: Position. (vec3_float)
target: Point this to a gfx_portal_camera that "sees" the view you want to display on the portal. (string (target))
targetname: Can possibly be fired. (string (targetname))
------ DESCRIPTION ------
Portal surface indicator. This will "lock on" the brush face closest to it and identify as a portal. The view displayed on the portal surface is the view of the gfx_portal_camera that this entity targets. Also used for mirrors (see Notes).
The entity must be no farther than 64 units away from the portal surface to lock onto it. To make a mirror, apply the common/mirror shader to the surface, place this entity near it but don't target a gfx_portal_camera.
*/

/*QUAKED gfx_shader_mod (1 0.498 0.247) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
targetname: [required] Must be someone's target for firing. (string (targetname))
origin: Position. (vec3_float)
replacement: Name of replacement shader. (string)
shader: Name of original shader. (string (texture))
------ DESCRIPTION ------
Entity remaps shader when activated.
*/

/*QUAKED sensor_buildable (0.263 0.667 0) SPAWN_DISABLED NEGATE
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
buildables: A comma delimited list of buildables which will trigger this entity. If omitted matches all buildables. (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret, tesla,arm,medistat,drill,reactor,repeater)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a buildable or subset of buildables.
If condition is satisfied fires targets continuously with "wait" period.
If NEGATE used, sensor still needs to be touched to activate.
*/

/*QUAKED trigger_buildable (0.263 0.667 0) SPAWN_DISABLED NEGATE
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_buildable
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
buildables: A comma delimited list of buildables which will trigger this entity. If omitted matches all buildables. (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret, tesla,arm,medistat,drill,reactor,repeater)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a buildable or subset of buildables.
If condition is satisfied fires targets continuously with "wait" period.
If NEGATE used, sensor still needs to be touched to activate.
*/

/*QUAKED sensor_creep (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Detects creep, i.e. area where the building is allowed.
If condition is satisfied fires targets continuously.
*/

/*QUAKED sensor_end (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED NEGATE
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. 0 or omit to detect draw. (int)
------ DESCRIPTION ------
Fires its targets when the team wins.
*/

/*QUAKED trigger_win (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED NEGATE
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_end
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. 0 or omit to detect draw. (int)
------ DESCRIPTION ------
Fires its targets when the team wins.
*/

/*QUAKED sensor_player (0.263 0.667 0) SPAWN_DISABLED NEGATE
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
classes: A comma delimited list of alien classes which will trigger this entity. (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
equipment: A comma delimited list of human weapons or upgrades which will trigger this entity. (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon, larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. Omit if you don't want to check the team. Not affected by NEGATE. (int)
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a specific class or subset of classes. If no classes key is supplied every class will trigger this entity.
Triggered by a player carrying some item (weapon or upgrade) or subset of items. If no equipment key is supplied every human will trigger this entity.
*/

/*QUAKED trigger_class (0.263 0.667 0) SPAWN_DISABLED NEGATE
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_player
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
classes: A comma delimited list of alien classes which will trigger this entity. (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
equipment: A comma delimited list of human weapons or upgrades which will trigger this entity. (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon, larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. Omit if you don't want to check the team. Not affected by NEGATE. (int)
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a specific class or subset of classes. If no classes key is supplied every class will trigger this entity.
Triggered by a player carrying some item (weapon or upgrade) or subset of items. If no equipment key is supplied every human will trigger this entity.
*/

/*QUAKED trigger_equipment (0.263 0.667 0) SPAWN_DISABLED NEGATE
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_player
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
classes: A comma delimited list of alien classes which will trigger this entity. (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
equipment: A comma delimited list of human weapons or upgrades which will trigger this entity. (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon, larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. Omit if you don't want to check the team. Not affected by NEGATE. (int)
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a specific class or subset of classes. If no classes key is supplied every class will trigger this entity.
Triggered by a player carrying some item (weapon or upgrade) or subset of items. If no equipment key is supplied every human will trigger this entity.
*/

/*QUAKED trigger_multiple (0.263 0.667 0) HUMANS ALIENS
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_player
------ FLAGS ------
HUMANS: Activated by humans.
ALIENS: Activated by aliens.
------ PROPERTIES ------
target: Name of the target to fire at. (string (target))
targetname: Can also be triggered as target. (string (targetname))
wait: Time in seconds until trigger becomes re-triggerable after it's been touched. (time_2float (time [variance]), def: 0.5 0)
------ DESCRIPTION ------
Triggered by a player.
*/

/*QUAKED sensor_power (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
*/

/*QUAKED sensor_stage (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED NEGATE
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
stage: The stage at which this entity is triggered. 2nd stage is 1, 3rd is 2. (int)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
team: 1 for aliens, 2 for humans. Omit if you don't want to check the team. (int)
------ DESCRIPTION ------
Triggers when the team reaches the stage. Stage down doesn't trigger.
*/

/*QUAKED trigger_stage (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED NEGATE
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_stage
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
NEGATE: Negate sensor condition.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
stage: The stage at which this entity is triggered. 2nd stage is 1, 3rd is 2. (int)
targetname: Can also be triggered as target. (string (targetname))
team: 1 for aliens, 2 for humans. Omit if you don't want to check the team. (int)
------ DESCRIPTION ------
Triggers when the team reaches the stage. Stage down doesn't trigger.
*/

/*QUAKED sensor_start (0.263 0.667 0) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Fires the targets at game start.
*/

/*QUAKED trigger_always (0.263 0.667 0) (-8 -8 -8) (8 8 8)
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sensor_start
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
------ DESCRIPTION ------
Fires the targets at game start.
*/

/*QUAKED sensor_support (0.263 0.667 0) (-8 -8 -8) (8 8 8) SPAWN_DISABLED
------ FLAGS ------
SPAWN_DISABLED: Disabled by default.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
team: The only valuable value is 1, i.e. aliens. Make sure you set this. (int)
------ DESCRIPTION ------
Detects creep, i.e. area where the building is allowed.
If condition is satisfied fires targets continuously.
*/

/*QUAKED sensor_timer (0.263 0.667 0) (-8 -8 -8) (8 8 8) START_ON
------ FLAGS ------
START_ON: Timer will start on in the game and continuously fire its targets.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Delay in seconds between each triggering of its targets. (time_2float (time [variance]))
------ DESCRIPTION ------
Entity continuously fires its targets after a preset time delay.
*/

/*QUAKED func_timer (0.263 0.667 0) (-8 -8 -8) (8 8 8) START_ON
------ FLAGS ------
START_ON: Timer will start on in the game and continuously fire its targets.
------ PROPERTIES ------
target: [required] Must have entity to fire at. (string (target))
origin: Position. (vec3_float)
targetname: Give it a name to be able to toggle its activity. (string (targetname))
wait: Delay in seconds between each triggering of its targets. (time_2float (time [variance]))
------ DESCRIPTION ------
Entity continuously fires its targets after a preset time delay.
*/

/*QUAKED sfx_speaker (0 0.702 0.702) (-8 -8 -8) (8 8 8) PRESTARTED_LOOP LOOP BROADCAST ACTIVATOR_SPEAKER
------ FLAGS ------
PRESTARTED_LOOP: Same as LOOP, but speaker is active by default.
LOOP: Makes infinite loop. Can be toggled via targetname.
BROADCAST: Makes sound global, sound volume is maximal everywhere on map. Doesn't work with LOOPs.
ACTIVATOR_SPEAKER: Plays sound only for person who activated it.
------ PROPERTIES ------
noise: Path/name of .wav or .ogg file. (string (sound), eg: sound/noise.wav, def: NOSOUND)
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
wait: With nonzero variance part continuously starts sounds in parallel with delay defined by "wait". Otherwise makes no effect. Ignores LOOP flag. (time_2float (time [variance]))
------ DESCRIPTION ------
Sound generating entity.
The path portion value of the "noise" key can be replaced by the implicit folder character "*" for triggered sounds that belong to a particular player model. For example, if you want to create a "bottomless pit" in which the player screams and dies when he falls into, you would place a sensor_player over the floor of the pit and target a spx_speaker with it. Then, you would set the "noise" key to "*falling1.wav". The * character means the current player model's sound folder. So if your current player model is Granger, * = sound/player/builder, if your current player model is Battlesuit Human, * = sound/player/human_bsuit, etc. This cool feature provides an excellent way to create "player-specific" triggered sounds in your levels. Implies ACTIVATOR_SPEAKER on.
*/

/*QUAKED target_speaker (0 0.702 0.702) (-8 -8 -8) (8 8 8) PRESTARTED_LOOP LOOP BROADCAST ACTIVATOR_SPEAKER
DEPRECATED! DEPRECATED! DEPRECATED!
RECOMMENDED TO USE: sfx_speaker
------ FLAGS ------
PRESTARTED_LOOP: Same as LOOP, but speaker is active by default.
LOOP: Makes infinite loop. Can be toggled via targetname.
BROADCAST: Makes sound global, sound volume is maximal everywhere on map. Doesn't work with LOOPs.
ACTIVATOR_SPEAKER: Plays sound only for person who activated it.
------ PROPERTIES ------
noise: Path/name of .wav or .ogg file. (string (sound), eg: sound/noise.wav, def: NOSOUND)
origin: Position. (vec3_float)
targetname: Can possibly be fired. (string (targetname))
wait: With nonzero variance part continuously starts sounds in parallel with delay defined by "wait". Otherwise makes no effect. Ignores LOOP flag. (time_2float (time [variance]))
------ DESCRIPTION ------
Sound generating entity.
The path portion value of the "noise" key can be replaced by the implicit folder character "*" for triggered sounds that belong to a particular player model. For example, if you want to create a "bottomless pit" in which the player screams and dies when he falls into, you would place a sensor_player over the floor of the pit and target a spx_speaker with it. Then, you would set the "noise" key to "*falling1.wav". The * character means the current player model's sound folder. So if your current player model is Granger, * = sound/player/builder, if your current player model is Battlesuit Human, * = sound/player/human_bsuit, etc. This cool feature provides an excellent way to create "player-specific" triggered sounds in your levels. Implies ACTIVATOR_SPEAKER on.
*/

/*QUAKED _decal (0 1 0)
------ PROPERTIES ------
target: Projection direction, pos_target. (string (target))
------ DESCRIPTION ------
[q3map]-only entity that specifies a decal to be projected. Should contain 1 or more patch meshes (curves) and target an pos_target entity. The distance between the center of the _decal entity and the target is the axis and distance of projection.

*/

/*QUAKED _skybox (0.267 0.267 1) (-8 -8 -8) (8 8 8)
------ PROPERTIES ------
angle: [q3map] Short version of "angles". (float (yaw))
origin: Position. (vec3_float)
_scale: [q3map] Scale skybox geometry. Can be vec3_float or just float (x=y=z=value). (vec3_float, def: 64 64 64)
angles: [q3map] Skybox geometry orientation. (vec3_float (yaw pitch roll))
------ DESCRIPTION ------
[q3map]-only entity. Used to make skybox with additional geometry (portal sky).
Place this entity into isolated box.
More info: http://en.wikibooks.org/wiki/Q3Map2#skybox_tutorial
*/

